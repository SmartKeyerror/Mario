<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>smartkeyerror.com/</title>
   
   <link>https://smartkeyerror.com</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>DevOps基础(1)--Shell脚本编程</title>
	  <link>//shell-programing</link>
	  <author></author>
	  <pubDate>2019-06-17T09:31:51+00:00</pubDate>
	  <guid>//shell-programing</guid>
	  <description><![CDATA[
	     <p>由于Docker容器以及Kubernetes容器编排服务的蓬勃发展， 服务器以及业务服务的运维不再是运维工程师的专属， 业务的开发工程师也必须加入到运维的领域之中， 与运维工程师合作， 形成一套完整、高效的自动化运维与部署的系统。 而在我看来， 传统的运维工程师将会逐渐被应用开发工程师所取代， 因为Kubernetes赋予了开发人员强大的负载均衡、自动横向拓展以及高效管理的相关功能。 而在这些宏大的系统建设之前， Shell编程是无论如何都离不开的话题。</p>

<!---more--->

<h4 id="1-shell变量">1. Shell变量</h4>
<p>作为一个后台开发人员， Shell脚本既陌生由熟悉， 毕竟Linux命令哪个后台开发不会接触呢？ 将一个又一个的Linux命令收集起来， 并使用一些粘合剂进行组合， 最终就得到了Shell脚本。</p>

<p>Shell和Python语言一样， 是一个弱类型语言， 也就是说一个变量可以对其进行任意的类型赋值:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ foo</span><span class="o">=</span><span class="s2">"bar"</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$foo</span>
bar
smart@Zero:~<span class="nv">$ foo</span><span class="o">=</span>10
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$foo</span>
10
</code></pre></div></div>

<p>在Terminal中， Shell命令就是一个天然的类似于Python的IPython环境， 如果我们想要对Python的某些语法进行测试的话， 需要进入Python或者IPython环境中， 而对于Shell而言， 打开Terminal就是自己工作的海洋。</p>

<p>在Shell中， 变量的赋值与其它语言没什么区别， 只不过获取变量的方式稍有不同而已。 我们可以认为<code class="highlighter-rouge">foo</code>变量是值<code class="highlighter-rouge">"bar"</code>的一个引用， 而要获取变量值， 需要借助引用名加上<code class="highlighter-rouge">$</code>符号， 非常类似C的指针。</p>

<p>在Shell编程的推荐使用方法中， 使用<code class="highlighter-rouge">${foo}</code>的方式获取变量内容， 多加一个大括号， 这样一来能够更加清楚的界定变量名称的范围， 不至于出现一些奇奇怪怪的问题。</p>

<p>除了我们自己定义的变量以外， 在Linux运行时， 还会预先定义一系列的环境变量。 环境变量说的简单一些就是定义在某一个文件中， 供整个Linux使用的变量， 可以认为是一种最高层的全局变量。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ </span>env
...
<span class="nv">WORKON_HOME</span><span class="o">=</span>/home/smart/.virtualenvs
<span class="nv">HOME</span><span class="o">=</span>/home/smart
<span class="nv">PATH</span><span class="o">=</span>/home/smart/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin/
</code></pre></div></div>

<p>获取当前系统的环境变量也简单， 敲<code class="highlighter-rouge">env</code>即可。 在上面的结果中， <code class="highlighter-rouge">WORKON_HOME</code>是virtualenvwrapper的工作目录， 是我定义在<code class="highlighter-rouge">~/.bashrc</code>中的， 而<code class="highlighter-rouge">HOME</code>和<code class="highlighter-rouge">PATH</code>变量， 则是Linux操作系统定义的。</p>

<p>获取系统的环境变量和获取自己定义的变量一样， <code class="highlighter-rouge">$</code>符+变量名:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$HOME</span>
/home/smart
</code></pre></div></div>

<p>值得一提的就是<code class="highlighter-rouge">PATH</code>变量， 在安装一些软件时， 例如Java， Go时， 都需要将一些变量加入到<code class="highlighter-rouge">PATH</code>中， 为什么这么做？ Linux系统会在<code class="highlighter-rouge">PATH</code>变量值的路径中寻找可执行的二进制文件， 而当我们把诸如<code class="highlighter-rouge">GOPATH</code>的变量值假如到<code class="highlighter-rouge">PATH</code>变量中以后， 在任何的目录下， 都可以使用Go的相关命令， 这就是<code class="highlighter-rouge">PATH</code>变量的作用。</p>

<h4 id="2-获取系统函数的返回值">2. 获取系统函数的返回值</h4>
<p>诸如<code class="highlighter-rouge">cat</code>, <code class="highlighter-rouge">du</code>, <code class="highlighter-rouge">date</code>等命令， 实际上就是函数， 只不过是由C编写并通过某种方式暴露给用户而已。</p>

<p><code class="highlighter-rouge">date</code>函数用以获取当前时区的时间:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ </span>date
2019年 05月 12日 星期日 10:43:48 CST
</code></pre></div></div>

<p>在编写Shell脚本时， 很多时候都需要将函数的运行结果保存在某一个变量中， 所以Shell提供了两种方式进行结果的赋值:</p>
<ol>
  <li>使用variable=&amp;#96date&amp;#96</li>
  <li>使用variable=$(date)</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ foo</span><span class="o">=</span><span class="sb">`</span>date<span class="sb">`</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$foo</span>
2019年 05月 12日 星期日 10:49:21 CST
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$foo</span>
2019年 05月 12日 星期日 10:49:21 CST
</code></pre></div></div>

<p>如果查看<code class="highlighter-rouge">date</code>的manual手册的话， 会发现它还支持日期的格式化:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ foo</span><span class="o">=</span><span class="sb">`</span>date +%y%m%d%H%M%S<span class="sb">`</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$foo</span>
190512105105
</code></pre></div></div>

<p>此外， Shell还提供了对上一个命令所执行结果的获取， 使用<code class="highlighter-rouge">$?</code>进行获取。 这是什么意思？ 在Shell中， 一条命令如果正常执行的话， 返回值将会是0， 如果命令执行时出现了某些错误的话， 返回值将会大于0， 且小于255。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 执行一条正常的命令</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"Hello World"</span>
Hello World
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
0

<span class="c"># 执行一条会抛出错误的命令</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-alh</span> NotExistFile
<span class="nb">ls</span>: cannot access <span class="s1">'NotExistFile'</span>: No such file or directory
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
2
</code></pre></div></div>

<p>由于NotExistFile是一个不存在的文件， 所以<code class="highlighter-rouge">ls</code>命令会产生一个标准错误并输出至屏幕中， 此时的退出状态码将会为2。 一些常见的退出状态码如下:</p>

<table>
  <thead>
    <tr>
      <th>状态码</th>
      <th>描述</th>
      <th>状态码</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>命令成功结束</td>
      <td>126</td>
      <td>命令不可执行</td>
    </tr>
    <tr>
      <td>1</td>
      <td>一般性未知错误</td>
      <td>127</td>
      <td>没找到命令</td>
    </tr>
    <tr>
      <td>2</td>
      <td>不合适的shell命令</td>
      <td>130</td>
      <td>通过Ctrl+C退出的命令</td>
    </tr>
  </tbody>
</table>

<h4 id="3-流程控制">3. 流程控制</h4>
<p>既然是一种语言， 又怎么能少的了流程控制。 在Shell脚本中， 使用最为广泛的恐怕就是<code class="highlighter-rouge">if-then</code>判断了。</p>

<h5 id="31-if-then">3.1 if-then</h5>
<p>条件语句的基本模板:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span>command-1
<span class="k">then
  </span>command-2
<span class="k">else
  </span>command-3
<span class="k">fi</span>
</code></pre></div></div>

<p>需要特别注意的是， 这里的条件判断是command-1这条命令的执行结果: 如果command-1执行的退出状态码为0的话， 执行then语句块的内容， 否则退出。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">if </span><span class="nb">ls</span> <span class="nt">-alh</span> NotExistFile
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"The ls command exec successed"</span>
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"Some error happened when exec ls"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>由于<code class="highlighter-rouge">ls -alh NotExistFile</code>的退出状态码为2， 所以将会输出”Some error happened when exec ls”。 如果我们想要true/false的条件语句， 使用<code class="highlighter-rouge">[[  ]]</code>。 例如， 如果变量<code class="highlighter-rouge">foo</code>的值为”bar”的话， 打印一条语句， 否则什么都不做:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">bar</span><span class="o">=</span><span class="s2">"foo"</span>
<span class="k">if</span> <span class="o">[[</span> <span class="k">${</span><span class="nv">bar</span><span class="k">}</span> <span class="o">=</span> <span class="s2">"foo"</span> <span class="o">]]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Right"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>与传统的语言都不同的是， 判断两个变量是否相等使用的是单个<code class="highlighter-rouge">=</code>号， 而不是<code class="highlighter-rouge">==</code>， 需要注意。</p>

<p>Shell也提供了一些参数来帮助我们进行条件判断， 例如<code class="highlighter-rouge">-n str</code>表示检查str的长度是否大于0， <code class="highlighter-rouge">-z str</code>表示检查str的长度是否为0， <code class="highlighter-rouge">-d file</code>用以检测file是否存在并且是一个目录, <code class="highlighter-rouge">-e file</code>判断file是否存在…</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="k">${</span><span class="nv">bar</span><span class="k">}</span> <span class="o">]]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"The length of the bar is not zero"</span>
<span class="k">fi

if</span> <span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"/home/smart"</span> <span class="o">]]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"/home/smart exist, and it's a directory"</span>
<span class="k">fi</span>
</code></pre></div></div>

<h5 id="32-case语句">3.2 case语句</h5>
<p>有时候变量的值会有多种， 如果一个一个的写<code class="highlighter-rouge">if</code>的话太麻烦了， 所以就有了<code class="highlighter-rouge">case</code>语句， 基本模板:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> variable <span class="k">in
</span>A <span class="p">|</span> B<span class="p">)</span> command-1 <span class="p">;;</span>
C<span class="p">)</span> command-2 <span class="p">;;</span>
D<span class="p">)</span> command-3 <span class="p">;;</span>
<span class="k">*</span><span class="p">)</span> default-command <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<p>注意一下语法格式就好， 没有什么特别复杂的地方。</p>

<h5 id="33-while语句">3.3 while语句</h5>
<p>while语句的基本模板:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while </span>condition
<span class="k">do
  </span><span class="nb">command
</span><span class="k">done</span>
</code></pre></div></div>

<p>condition的种类与<code class="highlighter-rouge">if-then</code>语法相同， 既可以判断命令的退出状态码， 也可以使用<code class="highlighter-rouge">[[  ]]</code>的形式来进行true/false判断:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 一个无限循环</span>
<span class="k">while</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="k">${</span><span class="nv">bar</span><span class="k">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"The length of bar is not zero"</span>
<span class="k">done</span>
</code></pre></div></div>

<h5 id="34-for循环">3.4 for循环</h5>
<p><code class="highlighter-rouge">for</code>循环的语法格式更贴近于Python， 其模板为:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>var <span class="k">in </span>list
<span class="k">do
  </span><span class="nb">command
</span><span class="k">done</span>
</code></pre></div></div>

<p>例如使用通配符来生成文件列表， 然后遍历， 当遍历的文件是一个目录时， 打印它:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>file <span class="k">in</span> /home/smart/<span class="k">*</span>
<span class="k">do
  if</span> <span class="o">[[</span> <span class="nt">-d</span> <span class="k">${</span><span class="nv">file</span><span class="k">}</span> <span class="o">]]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="k">}</span><span class="s2"> is a directory"</span>
  <span class="k">fi
done</span>
</code></pre></div></div>

<p>也可以使用C语言风格的循环语句:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">((</span> i <span class="o">=</span> 0<span class="p">;</span> i &lt; 10<span class="p">;</span> i++ <span class="o">))</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div>

<h4 id="4-处理用户输入与重定向">4. 处理用户输入与重定向</h4>
<p>向脚本传递用户的参数是一个shell脚本最基本的操作， 脚本获取参数的方式也与其它语言不同。 诸如Java， 参数是以字符数组的方式传递给main函数的。</p>

<p>在shell中， 使用<code class="highlighter-rouge">$1</code>来获取第一个参数， <code class="highlighter-rouge">$2</code>获取第二个参数, …， <code class="highlighter-rouge">$n</code>获取第n个参数。 而<code class="highlighter-rouge">$0</code>比较特殊， 代表了执行该脚本的路径名称。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># test.sh</span>
<span class="nb">echo</span> <span class="k">${</span><span class="nv">0</span><span class="k">}</span>, <span class="k">${</span><span class="nv">1</span><span class="k">}</span>, <span class="k">${</span><span class="nv">2</span><span class="k">}</span>, <span class="k">${</span><span class="nv">3</span><span class="k">}</span>
</code></pre></div></div>

<p>在赋予了普通用户对该脚本的执行权限后， 执行该脚本: <code class="highlighter-rouge">./test.sh A B C</code>， 将会得到输出:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./test.sh, A, B, C
</code></pre></div></div>

<p>对于<code class="highlighter-rouge">$0</code>， 如果只想要获取脚本名称的话， 可以使用<code class="highlighter-rouge">$(basename ${0})</code>。 获取参数个数使用<code class="highlighter-rouge">$#</code>， 获取所有参数使用<code class="highlighter-rouge">$*</code>或者是<code class="highlighter-rouge">$@</code>， 前者如果使用<code class="highlighter-rouge">"$*"</code>进行引用的话， 将会作为一个字符整体对待， 而<code class="highlighter-rouge">$@</code>不管在何种情况下， 都是参数所组成的列表， 所以<code class="highlighter-rouge">$@</code>更多的用于参数的迭代。</p>

<p>提到参数处理， 就不得不提及<code class="highlighter-rouge">shift</code>关键字。在使用<code class="highlighter-rouge">shift</code>命令时,默认情况下它会将每个参数变量向左移动一个位置。所以,变量$3的值会移到$2中,变量$2的值会移到$1中,而变量$1的值则会被删除。</p>

<p><code class="highlighter-rouge">shift</code>的测试也很简单， 非常清楚的就能够知道它到底做了什么:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"All param: </span><span class="nv">$@</span><span class="s2">"</span>
<span class="nb">shift
echo</span> <span class="s2">"The first shift: </span><span class="nv">$@</span><span class="s2">"</span>
<span class="nb">shift
echo</span> <span class="s2">"The second shift: </span><span class="nv">$@</span><span class="s2">"</span>
<span class="nb">shift
echo</span> <span class="s2">"The third shift: </span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<p>这次多传递一些参数进入该脚本， 得到的输出:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smart@Zero:~<span class="nv">$ </span>./test.sh A B C D E F
All param: A B C D E F
The first <span class="nb">shift</span>: B C D E F
The second <span class="nb">shift</span>: C D E F
The third <span class="nb">shift</span>: D E F
</code></pre></div></div>

<p>每执行一次shift， 参数列表的首个参数都会被弹出， 如果执行<code class="highlighter-rouge">shift 2</code>的话， 将会弹出2个参数。</p>

<p>在<code class="highlighter-rouge">Ansible</code>的ad-hoc模式中， 通常我们会这样执行命令:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 将ansible所管理的所有主机进行文件拷贝, 并发数为10</span>
ansible all <span class="nt">-m</span> copy <span class="nt">-a</span> <span class="s2">"src=/home/smart/monitor/ dest=/home/monitor"</span> <span class="nt">-f</span> 5
</code></pre></div></div>

<p>在有了shift之后， 就可以很轻松的编写出对应的shell脚本了:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="c"># simulate_ansible.sh</span>
<span class="c"># 运行: ./simulate_ansible.sh all -m copy -a "src=/home/smart/monitor/ dest=/home/monitor" -f 5</span>

<span class="nb">echo</span> <span class="s2">"Get params: </span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">while</span> <span class="o">[[</span> <span class="nv">$# </span><span class="nt">-gt</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">do
  case</span> <span class="nv">$1</span> <span class="k">in
  </span>all<span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"The process host group: </span><span class="k">${</span><span class="nv">1</span><span class="k">}</span><span class="s2">"</span>
    <span class="nb">shift</span> <span class="p">;;</span>
  <span class="nt">-m</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Get module name: </span><span class="k">${</span><span class="nv">2</span><span class="k">}</span><span class="s2">"</span>
    <span class="nb">shift </span>2 <span class="p">;;</span>
  <span class="nt">-a</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Get parameter: </span><span class="k">${</span><span class="nv">2</span><span class="k">}</span><span class="s2">"</span>
    <span class="nb">shift </span>2 <span class="p">;;</span>
  <span class="nt">-f</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"The fork number is: </span><span class="k">${</span><span class="nv">2</span><span class="k">}</span><span class="s2">"</span>
    <span class="nb">shift </span>2 <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Bad params"</span>
    <span class="nb">exit </span>2
  <span class="k">esac
done</span>
</code></pre></div></div>

<p>在Linux I/O中， 标准输入使用0表示， 标准输出使用1表示， 标准错误使用2表示。 什么是标准输出/错误? 使用<code class="highlighter-rouge">ls</code>命令得到的结果就是标准输出， 使用<code class="highlighter-rouge">ls NotExistFile</code>命令得到的结果就是标准错误。</p>

<p>Shell脚本在执行时， 许多时候都是边缘触发或者是定时执行的， 其标准输出与错误我们是看不到的， 所以就需要有日志进行记录。 一个记录标准输出， 一个记录标准错误:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-alh</span> NotExistFile 1&gt;~/monitor/stdout.log 2&gt;~/monitor/stderror.log
</code></pre></div></div>

<p>有时候想偷个懒， 不管是输出还是错误， 都重定向到同一个文件:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-alh</span> &amp;&gt;~/homo/monitor/ls.log
</code></pre></div></div>

<h4 id="5-函数">5. 函数</h4>
<p>shell中的函数并没有很强大的功能， 更像是一个小型的shell脚本。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 定义</span>
funcname<span class="o">()</span> <span class="o">{</span>...<span class="o">}</span>
<span class="c"># 调用与参数传递</span>
funcname <span class="s2">"foo"</span> <span class="s2">"bar"</span>
</code></pre></div></div>

<h4 id="6-常见的shell脚本头设置">6. 常见的shell脚本头设置</h4>
<p>有时会看到在某些shell脚本中有这样的语句:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">set</span> <span class="nt">-x</span>
<span class="nb">exec</span> &amp;&gt; test.log
</code></pre></div></div>

<p><code class="highlighter-rouge">set</code>以及<code class="highlighter-rouge">exec</code>主要是对当前脚本的一些全局设置， 所以会放到脚本开始的地方。</p>

<p><code class="highlighter-rouge">set -e</code>表示如果当前的脚本在执行某一条命令时的退出状态码不为0时， 则整个脚本退出。 有些类似于异常的抛出与进程终止。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">ls</span> <span class="nt">-alh</span>
<span class="nb">ls</span> <span class="nt">-alh</span> NotExistFile
<span class="nb">echo</span> <span class="s2">"Done"</span>  <span class="c"># 永远不会执行到该行命令</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">set -x</code>则主要用于进行DEBUG， 在脚本执行时将会打印出每一行命令执行的详细信息。</p>

<p><code class="highlighter-rouge">exec &amp;&gt; test.log</code>则表示将当前脚本执行时所产生的所有标准输出与错误均重定向至test.log文件。</p>

<h4 id="7-子shell">7. 子shell</h4>
<p>假如我们编写了这样的一个shell脚本:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">cd</span> /home/smart/monitor
</code></pre></div></div>

<p>然后执行该脚本， 会发现当前的目录并没有发生改变， 为什么? 这是因为不管是使用<code class="highlighter-rouge">bash script.sh</code>执行还是使用<code class="highlighter-rouge">./script.sh</code>来执行脚本， 脚本的执行都在一个名为子shell的shell环境中执行。 子shell中执行<code class="highlighter-rouge">cd</code>命令， 并不会影响到当前的shell状态。</p>

<h4 id="8-小结">8. 小结</h4>
<p>从我的工作经验上来看， 如果是开发来兼职做运维工作的话， 以上的内容完全能够解决日常中需要的运维场景。 Shell脚本语言本身比较简单， 其核心仍然是一个又一个的Linux系统命令， Shell语言只是作为粘合剂将这些命令组合起来形成一个整体而已。</p>

<p>PS: 留一张思维导图作为自己的复习参考</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Blog/ShellScript.png" alt="" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>DevOps基础(2)--Ansible自动化运维工具</title>
	  <link>//Ansible</link>
	  <author></author>
	  <pubDate>2019-06-17T08:33:42+00:00</pubDate>
	  <guid>//Ansible</guid>
	  <description><![CDATA[
	     <p>Shell脚本能够为我们提供一部分的系统运维功能， 例如定时任务， 由Jenkins所管理的边缘触发任务等等， 但是如果想要对多台服务器进行管理和运维， 就需要Ansible来协助完成。</p>

<!---more--->

<h4 id="1-ansible是什么">1. Ansible是什么?</h4>

<p>Ansible是一个由Python语言编写的自动化运维工具， 底层基于SSH框架， 帮助运维以及开发人员进行批量的服务器管理。</p>

<p>假设我们有10台服务器， 需要查看当前每台服务器的磁盘使用状况， 如果说采用传统的SSH登录， 然后输入密码， 进入远程服务器， 使用<code class="highlighter-rouge">df -h</code>来查看磁盘的使用状态的话， 这个过程需要持续10次。 就算我们将客户端的公钥上传至服务器使得我们可以免密登录远程服务器， 这个过程仍然是很花时间的。</p>

<p>此时Ansible就发挥其作用了， 由于Ansible是基于SSH框架所实现的， 所以Ansible可以批量的进行远程服务器的SSH连接， 在该连接之上执行<code class="highlighter-rouge">df -h</code>， 并将结果返回给客户端。 而且Ansible还提供了多进程的方式进行工作， 进一步的提升执行效率以及节省运维人员的时间。</p>

<h4 id="2-ansible的安装与配置">2. Ansible的安装与配置</h4>
<p>正如前面所提到的， Ansible是由Python所编写的工具， 那么自然需要相应的Python环境或者是Python的虚拟环境。 在Linux操作系统中， 本身就包含了python2.7以及python3.6+的环境， 所以如果不使用虚拟环境的话， 可以直接使用</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install ansible
</code></pre></div></div>

<p>进行安装。 在安装完成后， 目录<code class="highlighter-rouge">/etc/ansible</code>即会生成。 在该目录下， 只有两个文件:</p>
<ul>
  <li>ansible.cfg: ansible的全局配置文件</li>
  <li>hosts: ansible默认的服务器配置文件， 有时又称为资产清单文件</li>
</ul>

<p>两个文件的配置都很简单且易懂。 对于hosts文件， 定义的格式以及具体的实例如下:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>group-name]
server-ip/server-domain <span class="nv">ansible_ssh_user</span><span class="o">=</span>USERNAME

<span class="o">[</span>local_server]
192.168.1.106 <span class="nv">ansible_ssh_user</span><span class="o">=</span>smart
</code></pre></div></div>

<p>在上面的实例中， 定义了<code class="highlighter-rouge">local_server</code>这个主机组， 在该组下只有一台主机， IP地址为192.168.1.106， 并定义了ansible在当前主机执行任务时的用户名称为smart。</p>

<p>而对于ansible.cfg文件， 更多的是定义默认的服务器配置文件路径， 执行的并发数， 以及客户端的公钥等。</p>

<p>为了能够使用公钥登录服务器， 得先将客户端的公钥上传至服务器的authorized_keys文件中， 这个过程可以交给ssh来自动完成:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-copy-id user@server-ip
输入密码即可
</code></pre></div></div>

<p>将当前客户端的公钥地址配置在ansible.cfg中， 其余的配置保持默认即可:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ansible_ssh_private_key_file</span><span class="o">=</span>/home/smart/.ssh/id_rsa.pub
</code></pre></div></div>

<h4 id="3-ansible的模块">3. ansible的模块</h4>

<p>对于一个任务而言， 需要的要素就是谁在哪儿做什么。 在Ansible自动化管理中， 当然是由Ansible来做了， 任务执行的范围即定义在hosts服务器配置文件之中， 剩下的就是定义具体的任务了。</p>

<p>Ansible提供了两种任务定义的方式， 一种叫ad-hoc， 一种叫playbooks。 ad-hoc就像是我们在Terminal中执行shell命令一样， 是一种临时的、无法保存成文件的任务执行方式。 而playbooks则是永久的、能够多次执行并保存成文件的任务， 相当于Shell脚本。</p>

<p>在前一篇Shell脚本的文章有提到， Shell脚本的核心是一条一条的Linux命令， Shell语言只是提供粘合剂将它们组合形成一个整体。 对于Ansible而言， 其核心就是模块， 而playbook则是将多个模块组合在一起。</p>

<p>那么Ansible模块又是什么? Ansible模块其实就是一个又一个的Python脚本， 为用户提供各种各样功能的脚本。 例如使用最为广泛的<code class="highlighter-rouge">copy</code>模块， 其作用是将本地的文件拷贝至服务器的目标目录中。</p>

<p>如果我们自己来完成文件拷贝的需求， 可以使用</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp file_path user@server-ip:server_path
</code></pre></div></div>

<p>如果是对很多台服务器进行文件拷贝的话， 可以使用一个Shell脚本来完成:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-xe</span>
<span class="nb">exec</span> &amp;&gt; /home/smart/shell/file-copy.log

<span class="nv">USER</span><span class="o">=</span><span class="s2">"admin"</span>
<span class="nv">LOCAL_PATH</span><span class="o">=</span><span class="s2">"/home/smart/monitor"</span>
<span class="nv">SERVER_PATH</span><span class="o">=</span><span class="s2">"/home/monitor"</span>

<span class="k">for </span>server <span class="k">in </span>server_list
<span class="k">do
  </span>scp <span class="nt">-R</span> <span class="k">${</span><span class="nv">LOCAL_PATH</span><span class="k">}</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>@<span class="k">${</span><span class="nv">server</span><span class="k">}</span>:<span class="k">${</span><span class="nv">SERVER_PATH</span><span class="k">}</span>
<span class="k">done</span>
</code></pre></div></div>

<p>而这么多行的Shell脚本， Ansible使用一个<code class="highlighter-rouge">copy</code>模块就可以完成， 这就是Ansible模块的威力。</p>

<p>如果使用Ansible命令行的模式来完成文件拷贝的任务， 只需要一行命令:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible all <span class="nt">-m</span> copy <span class="nt">-a</span> <span class="s2">"src=/home/smart/monitor dest=/home/monitor"</span> <span class="nt">-f</span> 6
</code></pre></div></div>

<p><code class="highlighter-rouge">all</code>表示对hosts文件中的所有主机执行任务， 也可以执行组名， 例如<code class="highlighter-rouge">local_server</code>。 <code class="highlighter-rouge">-m</code>指定模块名称， 这里选用<code class="highlighter-rouge">copy</code>模块。 <code class="highlighter-rouge">-a</code>添加模块所需要的参数， 而<code class="highlighter-rouge">-f</code>则指定并行的数量， 通常会和客户端的CPU核心数相同。</p>

<p>回到文章开始的地方， 对10台服务器执行<code class="highlighter-rouge">df -h</code>命令该怎么做? 由于这是一个Shell命令， 所以理所当然的使用<code class="highlighter-rouge">shell</code>模块， 传递给该模块的参数就是所要执行的命令:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible local_server <span class="nt">-m</span> shell <span class="nt">-a</span> <span class="s2">"df -h"</span>
</code></pre></div></div>

<p>将会得到这样的结果:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>192.168.1.106 | SUCCESS | <span class="nv">rc</span><span class="o">=</span>0 <span class="o">&gt;&gt;</span>
Filesystem      Size  Used Avail Use% Mounted on
udev            7.8G     0  7.8G   0% /dev
tmpfs           1.6G  2.2M  1.6G   1% /run
/dev/sdb3        95G   34G   57G  38% /
tmpfs           7.9G  265M  7.6G   4% /dev/shm
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.9G     0  7.9G   0% /sys/fs/cgroup
</code></pre></div></div>

<p>Ansible和Shell一样， 提供了非常多封装了各种各样功能的模块， 到目前为止， Ansible大概提供了约2100个模块， 几乎涵盖了服务器运维的所有方面。 所以我认为这进一步地印证了在Ansible中， 最为重要的并不是如何编写playbooks， 而是如何在这2100个模块中找到自己想要的， 并正确的使用它。</p>

<blockquote>
  <p>Ansible所有模块文档地址: <a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html">ansible list of modules</a></p>
</blockquote>

<h4 id="4-ansible-playbooks">4. Ansible playbooks</h4>
<p>通常来讲ad-hoc模式常常拿来做测试， 例如:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible all <span class="nt">-m</span> ping
</code></pre></div></div>

<p>来测试服务器的配置以及服务器的可达状态， 或者是说批量的添加用户并分配用户组等小功能。 在自动化部署这一需求下， 仍然会使用playbooks来组合测试、QA以及生产环境的相关任务。</p>

<p>在playbooks下有两个很重要的概念: roles， tasks。 roles是一个或多个任务(task)的集成， 表示当前的任务所运行的环境。 通常都会分为dev， test， QA， prod， 主要用于环境区分。 而tasks则是变量列表和具体的任务列表的集成， 代表了真正要执行的任务。 所以， 一个playbooks的结构往往是这样的:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── dev.yaml
├── inventory.cfg
├── prod.yaml
├── roles
│   ├── dev
│   │   ├── tasks
│   │   │   └── main.yaml
│   │   └── vars
│   │       └── main.yaml
│   ├── prod
│   │   ├── tasks
│   │   │   └── main.yaml
│   │   └── vars
│   │       └── main.yaml
│   └── <span class="nb">test</span>
│       ├── tasks
│       │   └── main.yaml
│       └── vars
│           └── main.yaml
└── test.yaml
</code></pre></div></div>

<p>看起来会很复杂， 其实非常的简单。 在根目录下， <code class="highlighter-rouge">dev|test|prod.yaml</code>是playbooks的主要入口文件， 而reoles目录下的<code class="highlighter-rouge">dev|test|prod</code>目录中则保存着对应环境的环境变量以及所要执行的任务。 <code class="highlighter-rouge">inventory.cfg</code>则保存着当前项目所设计的服务器资产清单， 包括开发， 测试， QA以及生产服务器的分组和ip。</p>

<h5 id="41-入口文件testyaml">4.1 入口文件test.yaml</h5>
<p>这里以<code class="highlighter-rouge">test.yaml</code>入口文件为例， 该配置文件其实非常的简单:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">test</span>
</code></pre></div></div>

<p>没有更多内容了， 首先指定测试环境所用到的服务器组名， 其次指定测试环境的roles目录。 playbooks的运行是从入口文件开始的:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory.cfg test.yaml
</code></pre></div></div>

<h5 id="42-任务列表文件">4.2 任务列表文件</h5>
<p>对于一个task.yaml而言， 也非常简单: 组合多个模块。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print current date</span>
  <span class="na">shell</span><span class="pi">:</span> <span class="s">date</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">copy file</span>
  <span class="na">copy</span><span class="pi">:</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s">/home/monitor/test.log</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s">/home/monitor</span>
</code></pre></div></div>

<p>只不过是将ad-hoc模式下变量传递的方式改写成yaml文件的格式而已， 本质上仍然是对模块的应用。 但是这种任务编写的方式提供了额外的拓展功能， 例如<code class="highlighter-rouge">chdir</code>改变当前任务的工作目录， <code class="highlighter-rouge">register</code>将当前任务的执行结果保存至某一个变量中， 可以用于后续的DEBUG。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print current date</span>
  <span class="na">shell</span><span class="pi">:</span> <span class="s">date</span>
  <span class="na">args</span><span class="pi">:</span>
    <span class="na">chdir</span><span class="pi">:</span> <span class="s">/home/monitor</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s">date_result</span>
<span class="s">-debug</span><span class="pi">:</span> <span class="s">var=date_result</span>
</code></pre></div></div>

<h5 id="43-变量列表文件">4.3 变量列表文件</h5>
<p>出于编码的最佳规范， 一些变量或者是常量最好是保存至某一个文件中， 而后进行引用。 在playbooks中， 我们只需要将变量写入<code class="highlighter-rouge">vars/main.yaml</code>， 以及在<code class="highlighter-rouge">tasks/main.yaml</code>中使用即可， 至于中间是怎么工作的， 可以完全不用关心。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vars/main.yaml</span>
<span class="na">home_path</span><span class="pi">:</span> <span class="s">/home/smartkeyerror</span>

<span class="c1"># tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ls home_path</span>
  <span class="na">shell</span><span class="pi">:</span> <span class="s">ls ""</span>
  <span class="c1"># 如果使用进行变量引用的话， 必须添加""</span>
</code></pre></div></div>

<p>既然变量文件使用yaml的数据格式进行写入， 那么就可以使用dict数据结构来进行变量引用:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 定义</span>
<span class="na">foo</span><span class="pi">:</span>
  <span class="na">field1</span><span class="pi">:</span> <span class="s">A</span>
  <span class="na">field2</span><span class="pi">:</span> <span class="s">B</span>

<span class="c1"># 引用</span>
<span class="s">foo["field1"]</span>
<span class="s">foo.field1</span>
</code></pre></div></div>

<p>这种引用方式更多的是在模板(Template)中进行使用， <code class="highlighter-rouge">task.yaml</code>更多的是直接引用简单的变量。</p>

<h4 id="5-jinja2模板">5. Jinja2模板</h4>
<p>如果使用过Django或者是Flask等Python Web框架的小伙伴对Jinja2模板一定不会很陌生。</p>

<p>Ansible中的Jinja2模板并不是用于HTML文件的数据填充与渲染， 而是当做配置文件的模板进行远程配置文件的填充。</p>

<p>举一个并不是很恰当的例子， 但是能够说明问题。</p>

<p>假设有如下Nginx配置文件:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name gitlab.zero.com<span class="p">;</span>
    location / <span class="o">{</span>
        proxy_pass http://127.0.0.1:8181<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一个非常简单gitlab端口转发配置， 现在我想要将<code class="highlighter-rouge">server_name</code>配置项的值放入到变量文件中， 然后将该配置文件上传至服务器中。 当然我们可以使用<code class="highlighter-rouge">copy</code>模块来完成， 但是copy模块没有办法在拷贝的文件中填充变量， 这个时候就需要使用到模板。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># nginx.gitlab.j2</span>

server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name <span class="p">;</span>
    location / <span class="o">{</span>
        proxy_pass http://127.0.0.1:8181<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">generate gitlab nginx config to server</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s">./templates/nginx.gitlab.j2</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s">/etc/nginx/conf.d/gitlab.conf</span>
</code></pre></div></div>

<p>模板文件通常置于playbooks/templates目录中。 当执行完该playbooks之后， Ansible将会把填充好变量数据的Nginx配置文件置于应有的服务器目录下。</p>

<p>当然， Jinja2模板的功能远不止于此， 还可以在模板文件中添加条件判断以及数据的迭代:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">environment</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
    <span class="p">{{</span><span class="n">key</span><span class="p">}}:</span> <span class="s">"{{value}}"</span>
<span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>

<span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">used_kafka</span> <span class="o">%</span><span class="p">}</span>
    <span class="o">...</span>
<span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span></code></pre></figure>

<h4 id="6-ansible-vault对变量文件进行加密">6. Ansible Vault对变量文件进行加密</h4>

<p>有时为了保证变量文件的安全性， 以及在网络传输时的隐蔽性， 通常都需要对变量文件进行加密， 只有在使用变量文件时才对其进行解密。</p>

<p><code class="highlighter-rouge">ansible-vault</code>命令就是Ansible提供给我们对文件进行加密的工具。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 变量文件只有一个变量配置</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">cat </span>main.yaml
server_name: gitlab.zero.com

<span class="c"># 使用ansible-vault encrypt file进行加密</span>
smart@Zero:~<span class="nv">$ </span>ansible-vault encrypt main.yaml
New Vault password:
Confirm New Vault password:
Encryption successful

<span class="c"># 再次查看main.yaml</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">cat </span>main.yaml

<span class="nv">$ANSIBLE_VAULT</span><span class="p">;</span>1.1<span class="p">;</span>AES256
31356236643435613539353331383734376438373966393064666538636635643934663736636437
3961316333633462376234386437346462333539393039310a663932663832306464316435646539
36636665366233343266386466313831343165303238623163373237313764333363373662303862
3561646430623230620a663964363462366435386139383666356330333336343535373336346232
36386236373639666633666130653861636530613034623635626135313130366632
</code></pre></div></div>

<p>在这里使用了手工输入密码的方式进行加密与解密， 除此之外还可以将密码写入文件， 在进行加密解密时执行文件:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 生成密码文件</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"mypassword"</span> <span class="o">&gt;</span> .password.conf

<span class="c"># 修改文件权限以及所属用户组</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">sudo </span>chmod 600 .password.conf
smart@Zero:~<span class="nv">$ </span><span class="nb">sudo </span>chmod 600 .password.conf

<span class="c"># 加密</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">sudo </span>ansible-vault encrypt <span class="nt">--vault-id</span> .password.conf main.yaml

<span class="c"># 解密</span>
smart@Zero:~<span class="nv">$ </span><span class="nb">sudo </span>ansible-vault decrypt <span class="nt">--vault-id</span> .password.conf main.yaml
</code></pre></div></div>

<h4 id="7-小结">7. 小结</h4>

<p>以上就是Ansible的核心内容， 不会特别的复杂， 但是由于模块众多的原因， 还是需要花时间去阅读具体的模块文档。</p>

<p>可以看到， Ansible真的就只是一个能够在多台主机上执行同一个任务的运维工具而已。 而在我看来， 运维最重要的并不是工具， 而是运维的体系。</p>

<p>在接下来的文章中可以看到， 当我们使用了Docker容器以后， 一个真正的自动化运维体系才算刚刚开始。 如果更进一步地使用Kubernetes的话， 甚至可以不需要Ansible。</p>

	  ]]></description>
	</item>


</channel>
</rss>
