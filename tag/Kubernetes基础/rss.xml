<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>smartkeyerror.com/</title>
   
   <link>https://smartkeyerror.com</link>
   <description>Keep coding, Keep curiosity</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>VXLAN—构建Overlay容器网络</title>
	  <link>//VXLAN</link>
	  <author></author>
	  <pubDate>2020-08-06T09:06:25+00:00</pubDate>
	  <guid>//VXLAN</guid>
	  <description><![CDATA[
	     <p>由于VLAN实现中的VLAN ID仅有12位，只能划分4096个虚拟局域网网段，对于云计算等领域而言，其用户远远不止4096个。并且，VLAN依赖于交换机等物理设备的实现，一旦升级物理设备，集群网络可能需要重新配置。因此，基于上述的限制，VMware、Cisco等大型网络企业推出了VXLAN解决方案。</p>

<!---more--->

<p>VXLAN全称为Virtual eXtensible Local Area Network，可拓展虚拟局域网，不依赖于硬件实现，而是在三层网络(网络层)的基础之上构建出一个虚拟的二层网络(链路层)。也就是说，只要主机间IP地址可达，就可以使用VXLAN的方式构建一个Overlay网络。</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/ZeroMind/Network/VXLAN/virtual-machine-communicate-problems.png" alt="" /></p>

<p>在实际的介绍VXLAN之前，先来看一个集群中虚拟机通讯的问题。如上图所示，虚拟机-A(192.19.2.2)想要和虚拟机-C(192.16.2.6)进行通信，要如何实现?</p>

<p>由于节点10.168.4.3和10.168.9.3能够实现通信，那么是否能够将虚拟机间通讯的数据包封装在节点间的通讯包之上，抵达目的地之后再进行解包、分发呢? 就好像特洛伊木马一样。</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/ZeroMind/Network/VXLAN/virtual-machine-solution.png" alt="" /></p>

<p>如上图所示，虚拟机-A发送给虚拟机-C的数据包，首先经过一个工具进行封包，暂且称之为Tool，封包的结果就是将该数据包放置在节点间通讯数据包的Body中，作为数据发送给节点B。节点B收到该数据包之后，经过某种过滤规则，检查Body，发现这是一个发送给虚拟机-C的数据包，那么将数据包发送给节点C，单向通讯完成。</p>

<p>上述的过程其实就是VXLAN的基本原理组成，本质上就是对虚拟机间通讯数据包的封装和解封，乘着节点间通讯这条大船抵达目的地。</p>

<h3 id="1-vxlan协议原理">1. VXLAN协议原理</h3>

<p>在VXLAN协议中，负责封包、解包的组件称之为VTEP(VXLAN Tunnel Endpoints，VXLAN隧道端点)，可以简单的认为就是运行在各个节点上的一个进程。</p>

<p>每一个VTEP都有一个唯一的标志符，称之为VNI(VXLAN Network Identifier，VXLAN网络标识符)，其实就是拓展的VLAN ID。VNI被设计成24位，可以容纳16777216个不同的虚拟局域网，相较于VLAN是一个非常大的提升。</p>

<p>VXLAN在节点中的传输协议选择了UDP协议，而不是TCP协议。原因在于UDP协议相较于TCP协议速度更快，无需连接的建立与拆除，数据包的可靠传输则由虚拟机间的传输协议保证。</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/ZeroMind/Network/VXLAN/VXLAN-package.png" alt="" /></p>

<p>其中，VXLAN Header由VTEP添加，其中包含了24位VNI的值。可以看到，VXLAN其实就是对原有网络添加了一层拓展: VTEP。当数据包到达主机时，内核将MAC头和IP头取下，将UDP报文段发送给主机上的VTEP进程，VTEP进程首先检查VNI的值是否匹配(是不是给自己的包)，然后根据Inner IP Header决定发送给哪一个具体的虚拟机。</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/ZeroMind/Network/VXLAN/VXLAN-Transfer.png" alt="" /></p>

<p>现在，我们对VXLAN协议的基本原理已经很清楚了，现在再来看一些细节问题。<strong>首先，虚拟机-A发出的数据帧的目标MAC地址，也就是目标VTEP的MAC地址该如何获取?</strong> 两种方式，一种是通过广播的方式，另外一种，则是由外部进程自动的添加至各节点的ARP表中。<strong>其次，IP地址为192.16.2.6这台虚拟机所在节点的IP地址如何获取?</strong> 该IP地址则是通过Linux内核中的FDB(Forwarding Database)获取的，在该表中，会记录VTEP的MAC地址与节点IP地址的映射关系，该映射关系同样可以通过广播学习获取，或者由外部进程维护。</p>

<blockquote>
  <p>经典的”外部进程”有flannel、Weave等容器网络框架</p>
</blockquote>

<h3 id="2-使用vagrant构建vxlan点对点通信">2. 使用Vagrant构建VXLAN点对点通信</h3>

<p>Vagrant环境如下:</p>
<ul>
  <li>node-1: 网卡接口-enp0s8，IP地址-192.168.2.15/24</li>
  <li>node-2: 网卡接口-enp0s8，IP地址-192.168.2.16/24</li>
</ul>

<p>首先，在node-1上添加vxlan interface:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@node-1:~<span class="nv">$ </span><span class="nb">sudo </span>ip link add vxlan0 <span class="nb">type </span>vxlan <span class="se">\</span>
    id 1024 <span class="se">\</span>
    dstport 4789 <span class="se">\</span>
    remote 192.168.2.15 <span class="se">\</span>
    dev enp0s8
</code></pre></div></div>

<p>上述命令将创建出一个名称为<code class="highlighter-rouge">vxlan0</code>、类型为vxlan的网络接口，并且指定VNI为<code class="highlighter-rouge">1024</code>，vtep通信端口为<code class="highlighter-rouge">4789</code>，并且手动地指出了对端VTEP的IP地址(<code class="highlighter-rouge">192.168.2.16</code>)。</p>

<p>其次，为vxlan0网络接口添加一个IP地址，该IP地址可以是任意值:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@node-1:~<span class="nv">$ </span><span class="nb">sudo </span>ip addr add 10.100.1.15/24 dev vxlan0
vagrant@node-1:~<span class="nv">$ </span><span class="nb">sudo </span>ip link <span class="nb">set </span>vxlan0 up
</code></pre></div></div>

<p>那么此时所有目标地址为<code class="highlighter-rouge">10.100.1.10/24</code>网段的数据包均会通过vxlan0接口处理，可以从路由表上查看此信息:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@node-1:~<span class="nv">$ </span>ip route
10.100.1.0/24 dev vxlan0 proto kernel scope link src 10.100.1.15
</code></pre></div></div>

<p>并且，如果此时查看Linux FDB表的话会发现，此时表项中的MAC地址为空值:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@node-1:~<span class="nv">$ </span>bridge fdb
00:00:00:00:00:00 dev vxlan0 dst 192.168.2.16 via enp0s8 self permanent
</code></pre></div></div>

<p>即所有经过vxlan0处理的数据包都会发到<code class="highlighter-rouge">192.168.2.16</code>，其原因在于在创建vxlan0时，手动地指定了对端IP地址。</p>

<p>用同样的方式在另一台虚拟机上创建vxlan0接口，并配置相应的IP地址，即可测试连通性。</p>

<p>通过上面的实验用例，我们可以看到几个非常关键的步骤:</p>

<ul>
  <li><strong>在路由表中添加vtep设备网络段的路由信息</strong></li>
  <li><strong>在ARP表中添加vtep设备的MAC地址与vtep的IP地址映射</strong></li>
  <li><strong>在FDB表中添加vtep设备的MAC地址与vtep所在节点的IP地址映射</strong></li>
</ul>

<p>实际上，<code class="highlighter-rouge">Flannel</code>这一经典的Kubernetes容器网络解决方案的VXLAN模式就是这么实现的，VXLAN模式所组建的覆盖网络，其实就是一个由不同宿主机上的VTEP设备所组成的虚拟二层网络。</p>

<h3 id="reference">Reference</h3>

<ul>
  <li>https://www.kernel.org/doc/Documentation/networking/vxlan.txt</li>
  <li>https://support.huawei.com/enterprise/zh/doc/EDOC1100087027</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
