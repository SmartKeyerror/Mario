<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>smartkeyerror.com/</title>
   
   <link>https://smartkeyerror.com</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>MySQL权限管理</title>
	  <link>//MySQL-Permissions</link>
	  <author></author>
	  <pubDate>2018-10-30T09:49:09+00:00</pubDate>
	  <guid>//MySQL-Permissions</guid>
	  <description><![CDATA[
	     <p><code class="highlighter-rouge">MySQL</code>的权限管理重要性等同于服务器数据的重要性， 权限体系如果建立的不到位的话， 也就意味着生产数据处于危险状态。</p>

<!---more--->

<h4 id="1-ubuntu-1604-下安装mysql">1. Ubuntu 16.04 下安装MySQL</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get upgrade
<span class="nb">sudo </span>apt-get install mysql-server mysql-client
</code></pre></div></div>

<h4 id="2-修改相关的配置文件">2. 修改相关的配置文件</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/mysql/mysql.conf.d/mysqld.cnf

bind-address <span class="o">=</span> 0.0.0.0
max_connections <span class="o">=</span> 3000

<span class="c"># binlog相关配置</span>
server-id <span class="o">=</span> 2
log_bin <span class="o">=</span> /var/log/mysql/mysql-bin.log
expire_logs_days <span class="o">=</span> 10
max_binlog_size <span class="o">=</span> 100M

<span class="c"># 慢查询日志配置</span>
slow_query_log <span class="o">=</span> 1
slow_query_log_file <span class="o">=</span> /var/log/mysql/mysql-slow.log
long_query_time <span class="o">=</span> 2
</code></pre></div></div>
<p>编辑并保存后重启MySQL服务即可。另外需要在系统层面赋予MySQL最大文件描述符的配置：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /lib/systemd/system/mysql.service

<span class="c"># 添加</span>
<span class="nv">LimitNOFILE</span><span class="o">=</span>65535
<span class="nv">LimitNPROC</span><span class="o">=</span>65535
</code></pre></div></div>

<h4 id="3-管理权限体系的建立">3. 管理权限体系的建立</h4>
<p>通常MySQL的权限分级与开发团队的组织形式直接相关， 包括初级工程师(只能select部分database), 中级工程师(能够对数据进行增删改查)， 高级开发工程师(全部权限)， 但是在现代的web开发， 使用ORM框架的条件下， 对应用的账号则必须赋予较高的权限， 那么能够查看代码的开发人员依然能够拿到较高权限。 所以MySQL的权限控制需要和Linux权限控制相结合： 涉及生产服务器MySQL数据库连接代码应只存放于服务器中， 并对其进行高权限控制， 即该文件只能由高级开发工程师进行查看或者修改， 以保证权限的统一。</p>

<h5 id="31-创建用户并赋予权限">3.1 创建用户并赋予权限</h5>
<p>创建用户使用<code class="highlighter-rouge">GRANT</code>命令， 常见参数及说明如下表所示：</p>

<table>
  <thead>
    <tr>
      <th>GRANT</th>
      <th>ALL PRIVILEGES</th>
      <th>ON database.table</th>
      <th>TO user@address</th>
      <th>IDENTIFIED BY ‘password’</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>创建用户命令</td>
      <td>赋予什么权限</td>
      <td>哪个数据库以及哪张表</td>
      <td>用户名和登录地址</td>
      <td>密码</td>
    </tr>
  </tbody>
</table>

<p>创建smart用户， 并赋予其全部数据库的全部权限， 但只能在ip地址为144.35.177.20的机器上进行登录</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="o">*</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="s1">'smart'</span><span class="o">@</span><span class="s1">'144.35.177.20'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'passwd'</span><span class="p">;</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="k">where</span> <span class="k">User</span><span class="o">=</span><span class="nv">"smart"</span> <span class="err">\</span><span class="k">G</span><span class="p">;</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
                  <span class="k">Host</span><span class="p">:</span> <span class="mi">144</span><span class="p">.</span><span class="mi">35</span><span class="p">.</span><span class="mi">177</span><span class="p">.</span><span class="mi">20</span>
                  <span class="k">User</span><span class="p">:</span> <span class="n">smart</span>
           <span class="n">Select_priv</span><span class="p">:</span> <span class="n">Y</span>
           <span class="n">Insert_priv</span><span class="p">:</span> <span class="n">Y</span>
           <span class="n">Update_priv</span><span class="p">:</span> <span class="n">Y</span>
           <span class="n">Delete_priv</span><span class="p">:</span> <span class="n">Y</span>
           <span class="n">Create_priv</span><span class="p">:</span> <span class="n">Y</span>
             <span class="n">Drop_priv</span><span class="p">:</span> <span class="n">Y</span>
           <span class="n">Reload_priv</span><span class="p">:</span> <span class="n">Y</span>
         <span class="n">Shutdown_priv</span><span class="p">:</span> <span class="n">Y</span>
          <span class="n">Process_priv</span><span class="p">:</span> <span class="n">Y</span>
          <span class="p">...</span>  <span class="err">中间省略</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>
<p>在赋予<code class="highlighter-rouge">ALL PRIVILEGES</code>之后该用户除了不能创建用户以外， 用于对数据库的所有控制权限。 这样的账号应该只有运维经理以及高级开发才能拥有。</p>

<p>下面来看一下MySQL具体都有哪些权限:</p>

<table>
  <thead>
    <tr>
      <th>维度</th>
      <th>权限</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数据</td>
      <td>insert, select, update, delete</td>
    </tr>
    <tr>
      <td>表</td>
      <td>create, drop, references, index, alter, lock table, create temporary table</td>
    </tr>
    <tr>
      <td>主从复制</td>
      <td>replication client, replication slave</td>
    </tr>
    <tr>
      <td>服务器</td>
      <td>shutdown, processlist, grant, super, create role</td>
    </tr>
  </tbody>
</table>

<p>该表简单的对权限进行了一个分类， 作用仅是便于记忆而已。 根据<code class="highlighter-rouge">MySQL</code>官方文档所给出的权限以及每种权限的作用， 下面进行详细的整理。</p>

<ul>
  <li>ALTER: 允许更改表结构， 例如添加索引， 删除字段等。 <code class="highlighter-rouge">ALTER TABLE</code>语句需要有CREATE以及INSERT权限。 当我们对一个表进行重命名的时候， 需要有ALTER和DROP以及CREATE， INSERT的权限。</li>
  <li>ALTER ROUTINE: 使用ALTER存储过程的权限。</li>
  <li>CREATE: 创建表的权限。</li>
  <li>CREATE ROLE: 创建角色的权限， 当一个用户拥有了CREATE USER权限时， 该权限随即拥有。</li>
  <li>CREATE ROUTINE: 允许使用CREATE存储过程。</li>
  <li>CREATE TEMPORARY TABLES: 允许使用<code class="highlighter-rouge">CREATE TEMPORARY TABLE</code>语句来创建临时表， 这张临时表的 DROP TABLE， INSERT， UPDATE等权限随之赋予。</li>
  <li>CREATE USER: 能够使用 ALTER USER， CREATE ROLE， CREATE USER， DROP ROLE， DROP USER, RENAME USER， 以及REVOKE ALL PRIVILEGES等语句， 属于管理员权限。</li>
  <li>CREATE VIEW: 允许创建视图。</li>
  <li>DELETE: 允许从表中删除数据。</li>
  <li>DROP: 删除整张表以及数据的权限， TRUNCATE TABLE命令需要有该权限才能够执行。</li>
  <li>DROP ROLE: 允许删除某一个用户， 当用户具有了CREATE USER的权限时， 该权限随之赋予。</li>
  <li>GRANT OPTION: 允许为用户添加权限。</li>
  <li>INDEX: 允许添加和删除索引， 当用于具有CREATE的权限时， 该权限随之赋予。</li>
  <li>INSERT: 向表中插入数据的权限。</li>
  <li>LOCK TABLES: 锁表的权限。</li>
  <li>PROCESS: 允许查询当前数据库所运行的后台线程信息， 例如主从复制线程信息。</li>
  <li>RELOAD: 允许运行flush-xxx相关命令， 包括刷新权限， 日志等， 属于管理员权限。</li>
  <li>REPLICATION CLIENT： 允许使用SHOW MASTER STATUS, SHOW SLAVE STATUS, SHOW BINARY LOGS等语句， 主要用于主从复制。</li>
  <li>REPLICATION SLAVE: 允许更新主库的变化。</li>
  <li>SUPER: 这是一个相当重要的权限， 权限非常大， 并且<code class="highlighter-rouge">MySQL</code>在将来的版本中将会移除这个权限， 的确， 该权限比较危险。 SUPER权限能够在运行时修改系统变量， 该更主从复制相关信息， 以及更重要的， 该权限可以在<code class="highlighter-rouge">MySQL Session</code>中删除binlog日志文件， 即<code class="highlighter-rouge">purge master logs</code>命令。</li>
  <li>UPDATE: 更新表数据的权限。</li>
</ul>

<p>可以看到， 比较危险的权限也就是DROP, CREATE USER， GRANT OPTION， RELOAD以及SUPER权限， 其中最危险的就是SUPER权限， <strong>除了管理员以外， 任何账号均不能有SUPER权限</strong>。</p>

<h6 id="311-创建mysqldump账户并赋予权限">3.1.1 创建mysqldump账户并赋予权限</h6>
<p><code class="highlighter-rouge">mysqldump</code>命令的权限讲实话我并不清楚， 查阅网上相关资料之后进行创建并赋予：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">user</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">'passwd'</span><span class="p">;</span>
<span class="k">grant</span> <span class="k">select</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">grant</span> <span class="k">show</span> <span class="k">view</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">grant</span> <span class="k">lock</span> <span class="n">tables</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">grant</span> <span class="k">trigger</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="o">//</span> <span class="err">如果需要在备份时刷新二进制日志，</span> <span class="err">还需要以下权限</span>
<span class="k">grant</span> <span class="n">reload</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
<span class="k">grant</span> <span class="n">replication</span> <span class="n">slave</span><span class="p">,</span> <span class="n">replication</span> <span class="n">client</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'dumper'</span><span class="o">@</span><span class="s1">'localhost'</span><span class="p">;</span>
</code></pre></div></div>
<p>那么此时使用该账户进行登录， 进行查看<code class="highlighter-rouge">myProjects</code>库， 其余的增删改操作均不能进行。</p>

<h6 id="312-创建主从复制的账号并赋予权限">3.1.2 创建主从复制的账号并赋予权限</h6>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">grant</span> <span class="n">replication</span> <span class="n">slave</span><span class="p">,</span> <span class="n">replication</span> <span class="n">client</span> <span class="k">on</span> <span class="o">*</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="n">repl</span><span class="o">@</span><span class="s1">'192.168.0.%'</span> <span class="n">dentified</span> <span class="k">by</span> <span class="s1">'passwd'</span><span class="p">;</span>
</code></pre></div></div>
<p>这里使用<code class="highlighter-rouge">%</code>通配符来对该局域网内的所有机器进行权限的赋予。</p>

<h6 id="313-创建项目账号并赋予权限">3.1.3 创建项目账号并赋予权限</h6>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">grant</span> <span class="k">all</span> <span class="k">privileges</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'shop'</span><span class="o">@</span><span class="s1">'192.168.1.6'</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">'complex-passwd'</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="32-查看某个用户的权限">3.2 查看某个用户的权限</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">show</span> <span class="n">grants</span> <span class="k">for</span> <span class="s1">'user'</span><span class="o">@</span><span class="s1">'address'</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="33-回收用户权限以及删除用户">3.3 回收用户权限以及删除用户</h4>
<p>回收用户所有权限</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">revoke</span> <span class="k">all</span> <span class="k">on</span> <span class="o">*</span><span class="p">.</span><span class="o">*</span> <span class="k">from</span> <span class="s1">'user'</span><span class="o">@</span><span class="s1">'address'</span><span class="p">;</span>
</code></pre></div></div>
<p>回收用户部分权限</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">revoke</span> <span class="k">drop</span> <span class="k">on</span> <span class="n">myProjects</span><span class="p">.</span><span class="o">*</span> <span class="k">from</span> <span class="s1">'user'</span><span class="o">@</span><span class="s1">'address'</span><span class="p">;</span>
</code></pre></div></div>
<p>删除用户</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">drop</span> <span class="k">user</span> <span class="s1">'user'</span><span class="o">@</span><span class="s1">'address'</span><span class="p">;</span>
</code></pre></div></div>

<p>修改某个用户的密码</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">update</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="k">set</span> <span class="n">authentication_string</span><span class="o">=</span><span class="n">password</span><span class="p">(</span><span class="nv">"passwd"</span><span class="p">)</span> <span class="k">where</span> <span class="k">user</span><span class="o">=</span><span class="nv">"user"</span><span class="p">;</span>
</code></pre></div></div>

<p>在执行完上面儿的语句之后， 尽量的执行<code class="highlighter-rouge">flush privileges;</code>命令刷新一下权限。</p>

<h4 id="4-关于权限管理的一些杂谈">4. 关于权限管理的一些杂谈</h4>
<p>MySQL并没有提供不给用户授予什么权限的命令， 也就是没有<code class="highlighter-rouge">exclude</code>这种语法， 但是我们可以先给用户授予全部的权限， 然后将不必要的权限进行回收。 像<code class="highlighter-rouge">drop</code>这种很危险的权限就不要随便给， 如果库里面儿只有逻辑删除的话， <code class="highlighter-rouge">delete</code>权限都可以不给， 有需要的时候让管理员进行协助处理。 尽可能的用最小权限做更安全的事情， 毕竟使用<code class="highlighter-rouge">binlog</code>进行数据恢复也不可能保证100%成功， 将危险扼杀在摇篮里才是正解。</p>

<p>权限管理对于管理员来讲确实是比较麻烦的一件事情， 很多团队<code class="highlighter-rouge">root</code>账号满天跑， 包括笔者在内的团队在初期也是这样的。 在付出了血淋淋的代价之后才开始对权限进行管理， 亡羊补牢为时尚晚， 埋过的雷总会炸的。</p>


	  ]]></description>
	</item>

	<item>
	  <title>MySQL慢查询日志分析工具</title>
	  <link>//MySQL-slow-query-analysis-tool</link>
	  <author></author>
	  <pubDate>2018-10-25T09:49:09+00:00</pubDate>
	  <guid>//MySQL-slow-query-analysis-tool</guid>
	  <description><![CDATA[
	     <p>慢查询日志使我们对MySQL进行性能优化的关键指标， 只有在确定了哪些查询的确是慢查询之后才能对症下药， 进行性能优化， 而不是凭自身的感觉去判断， 结果有事往往出乎意料。 直接打开慢查询日志进行查看效率比较低效， 所以需要借助<code class="highlighter-rouge">pt-query-digest</code>工具来进行分析。</p>

<!---more--->

<h4 id="0-degine-mysql-version-57">0. Degine: MySQL Version: 5.7</h4>

<h4 id="1-percona-toolkit工具包的下载与安装">1. Percona Toolkit工具包的下载与安装</h4>
<p><code class="highlighter-rouge">Percona Toolkit</code>工具包包含了<code class="highlighter-rouge">pt-slave-delay</code>， <code class="highlighter-rouge">pt-query-digest</code>， <code class="highlighter-rouge">pt-mysql-summary</code>等非常有用的工具。</p>
<blockquote>
  <p>https://www.percona.com/downloads/percona-toolkit/LATEST/</p>
</blockquote>

<p>找对对应的版本以及平台进行安装即可。</p>

<h4 id="2-pt-query-digest的基本使用">2. pt-query-digest的基本使用</h4>
<p>首先来看一下分析的基本结果：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pt-query-digest <span class="nt">--report</span> mysql-slow.log
</code></pre></div></div>
<p>核心输出结果如下：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span> <span class="k">Current</span> <span class="n">date</span><span class="p">:</span> <span class="n">Tue</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">11</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">55</span> <span class="mi">2018</span>
<span class="o">#</span> <span class="n">Hostname</span><span class="p">:</span> <span class="n">Zero</span>
<span class="o">#</span> <span class="n">Files</span><span class="p">:</span> <span class="n">mysql</span><span class="o">-</span><span class="n">slow</span><span class="p">.</span><span class="n">log</span>
<span class="o">#</span> <span class="n">Overall</span><span class="p">:</span> <span class="mi">7</span><span class="p">.</span><span class="mi">77</span><span class="n">k</span> <span class="n">total</span><span class="p">,</span> <span class="mi">94</span> <span class="k">unique</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">QPS</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">02</span><span class="n">x</span> <span class="n">concurrency</span> <span class="n">___________</span>
<span class="o">#</span> <span class="n">Time</span> <span class="n">range</span><span class="p">:</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">18</span> <span class="mi">14</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">31</span> <span class="k">to</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">16</span> <span class="mi">10</span><span class="p">:</span><span class="mi">01</span><span class="p">:</span><span class="mi">13</span>
<span class="o">#</span> <span class="n">Attribute</span>          <span class="n">total</span>     <span class="k">min</span>     <span class="k">max</span>     <span class="k">avg</span>     <span class="mi">95</span><span class="o">%</span>  <span class="n">stddev</span>  <span class="n">median</span>
<span class="o">#</span> <span class="o">============</span>     <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span>
<span class="o">#</span> <span class="k">Exec</span> <span class="n">time</span>         <span class="mi">77201</span><span class="n">s</span>   <span class="mi">500</span><span class="n">ms</span>    <span class="mi">166</span><span class="n">s</span>     <span class="mi">10</span><span class="n">s</span>     <span class="mi">37</span><span class="n">s</span>     <span class="mi">15</span><span class="n">s</span>      <span class="mi">4</span><span class="n">s</span>
<span class="o">#</span> <span class="k">Lock</span> <span class="n">time</span>           <span class="mi">203</span><span class="n">s</span>       <span class="mi">0</span>     <span class="mi">22</span><span class="n">s</span>    <span class="mi">26</span><span class="n">ms</span>   <span class="mi">138</span><span class="n">us</span>   <span class="mi">500</span><span class="n">ms</span>    <span class="mi">73</span><span class="n">us</span>
<span class="o">#</span> <span class="k">Rows</span> <span class="n">sent</span>          <span class="mi">2</span><span class="p">.</span><span class="mi">46</span><span class="n">M</span>       <span class="mi">0</span>  <span class="mi">78</span><span class="p">.</span><span class="mi">34</span><span class="n">k</span>  <span class="mi">331</span><span class="p">.</span><span class="mi">51</span>  <span class="mi">511</span><span class="p">.</span><span class="mi">45</span>   <span class="mi">4</span><span class="p">.</span><span class="mi">37</span><span class="n">k</span>    <span class="mi">0</span><span class="p">.</span><span class="mi">99</span>
<span class="o">#</span> <span class="k">Rows</span> <span class="n">examine</span>      <span class="mi">63</span><span class="p">.</span><span class="mi">82</span><span class="k">G</span>       <span class="mi">0</span>  <span class="mi">52</span><span class="p">.</span><span class="mi">93</span><span class="n">M</span>   <span class="mi">8</span><span class="p">.</span><span class="mi">41</span><span class="n">M</span>  <span class="mi">28</span><span class="p">.</span><span class="mi">56</span><span class="n">M</span>  <span class="mi">11</span><span class="p">.</span><span class="mi">25</span><span class="n">M</span>   <span class="mi">3</span><span class="p">.</span><span class="mi">68</span><span class="n">M</span>
<span class="o">#</span> <span class="n">Query</span> <span class="k">size</span>         <span class="mi">5</span><span class="p">.</span><span class="mi">06</span><span class="n">M</span>       <span class="mi">6</span>  <span class="mi">16</span><span class="p">.</span><span class="mi">48</span><span class="n">k</span>  <span class="mi">682</span><span class="p">.</span><span class="mi">18</span>   <span class="mi">2</span><span class="p">.</span><span class="mi">06</span><span class="n">k</span>  <span class="mi">724</span><span class="p">.</span><span class="mi">05</span>  <span class="mi">420</span><span class="p">.</span><span class="mi">77</span>
</code></pre></div></div>
<p>可以看到结果还是比较直观的， 包括执行时间， 加锁时间等， 横坐标中最有价值的信息为<code class="highlighter-rouge">95%</code>， 意义为将查询从小到大排列， 取位于整个排列的95%位置， 这样以来就会滤掉较大的值， 减少极值对统计的影响。 可以看到上面的输出<code class="highlighter-rouge">Exec time - 95% </code>输出结果为37s， 数值比较大， 所以完全有必要进行慢查询的优化。</p>

<p>继续来看输出：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span> <span class="n">Profile</span>
<span class="o">#</span> <span class="n">Rank</span> <span class="n">Query</span> <span class="n">ID</span>                      <span class="n">Response</span> <span class="n">time</span>    <span class="n">Calls</span> <span class="n">R</span><span class="o">/</span><span class="k">Call</span>  <span class="n">V</span><span class="o">/</span><span class="n">M</span>
<span class="o">#</span> <span class="o">====</span> <span class="o">=============================</span> <span class="o">================</span> <span class="o">=====</span> <span class="o">=======</span> <span class="o">=====</span>
<span class="o">#</span>    <span class="mi">1</span> <span class="mi">0</span><span class="n">x530A2CE72ED76F6FD03452E6</span><span class="p">...</span> <span class="mi">20003</span><span class="p">.</span><span class="mi">2369</span> <span class="mi">25</span><span class="p">.</span><span class="mi">9</span><span class="o">%</span>   <span class="mi">478</span> <span class="mi">41</span><span class="p">.</span><span class="mi">8478</span> <span class="mi">17</span><span class="p">.</span><span class="mi">77</span> <span class="k">SELECT</span> <span class="n">lv_pt_order</span> <span class="n">lv_pt_order_detail</span> <span class="n">lv_pt_goods</span> <span class="n">lv_user</span>
<span class="o">#</span>    <span class="mi">2</span> <span class="mi">0</span><span class="n">x1B1C071EBB0DECB4FCB8B4C9</span><span class="p">...</span> <span class="mi">19870</span><span class="p">.</span><span class="mi">1927</span> <span class="mi">25</span><span class="p">.</span><span class="mi">7</span><span class="o">%</span>   <span class="mi">855</span> <span class="mi">23</span><span class="p">.</span><span class="mi">2400</span>  <span class="mi">6</span><span class="p">.</span><span class="mi">26</span> <span class="k">SELECT</span> <span class="n">lv_pt_order</span> <span class="n">lv_pt_order_detail</span> <span class="n">lv_pt_goods</span> <span class="n">lv_user</span>
<span class="o">#</span>    <span class="mi">3</span> <span class="mi">0</span><span class="n">x84CAC95FCB28351DEB798161</span><span class="p">...</span>  <span class="mi">9187</span><span class="p">.</span><span class="mi">0368</span> <span class="mi">11</span><span class="p">.</span><span class="mi">9</span><span class="o">%</span>   <span class="mi">727</span> <span class="mi">12</span><span class="p">.</span><span class="mi">6369</span>  <span class="mi">8</span><span class="p">.</span><span class="mi">70</span> <span class="k">SELECT</span> <span class="n">lv_pt_order</span> <span class="n">lv_pt_order_detail</span> <span class="n">lv_pt_goods</span> <span class="n">lv_user</span>
<span class="o">#</span>    <span class="mi">4</span> <span class="mi">0</span><span class="n">x32D67A543AD02B4178806916</span><span class="p">...</span>  <span class="mi">6330</span><span class="p">.</span><span class="mi">5023</span>  <span class="mi">8</span><span class="p">.</span><span class="mi">2</span><span class="o">%</span>  <span class="mi">1545</span>  <span class="mi">4</span><span class="p">.</span><span class="mi">0974</span>  <span class="mi">5</span><span class="p">.</span><span class="mi">78</span> <span class="k">UPDATE</span> <span class="n">lv_session</span>
</code></pre></div></div>
<p>其中<code class="highlighter-rouge">Query ID</code>是每一个查询的哈希值指纹， <code class="highlighter-rouge">Response time</code>包括所有查询的返回时间以及占比， <code class="highlighter-rouge">Calls</code>为查询的次数， <code class="highlighter-rouge">R/Call</code>为该查询的平均时间， <code class="highlighter-rouge">V/M</code>为方差均值比， 表示该查询的返回时间波动性， 该值越大越有优化的价值。</p>

<p>再往下面就是对<code class="highlighter-rouge">Profile</code>中的每一条进行的详细分析。</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span> <span class="n">Query</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">QPS</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="n">x</span> <span class="n">concurrency</span><span class="p">,</span> <span class="n">ID</span> <span class="mi">0</span><span class="n">x530A2CE72ED76F6FD03452E68015715F</span> <span class="k">at</span> <span class="n">byte</span> <span class="mi">6465751</span>
<span class="o">#</span> <span class="n">This</span> <span class="n">item</span> <span class="k">is</span> <span class="n">included</span> <span class="k">in</span> <span class="n">the</span> <span class="n">report</span> <span class="n">because</span> <span class="n">it</span> <span class="n">matches</span> <span class="c1">--limit.</span>
<span class="o">#</span> <span class="n">Scores</span><span class="p">:</span> <span class="n">V</span><span class="o">/</span><span class="n">M</span> <span class="o">=</span> <span class="mi">17</span><span class="p">.</span><span class="mi">77</span>
<span class="o">#</span> <span class="n">Time</span> <span class="n">range</span><span class="p">:</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">20</span> <span class="mi">18</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">33</span> <span class="k">to</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">13</span> <span class="mi">00</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">20</span>
<span class="o">#</span> <span class="n">Attribute</span>    <span class="n">pct</span>   <span class="n">total</span>     <span class="k">min</span>     <span class="k">max</span>     <span class="k">avg</span>     <span class="mi">95</span><span class="o">%</span>  <span class="n">stddev</span>  <span class="n">median</span>
<span class="o">#</span> <span class="o">============</span> <span class="o">===</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span> <span class="o">=======</span>
<span class="o">#</span> <span class="k">Count</span>          <span class="mi">6</span>     <span class="mi">478</span>
<span class="o">#</span> <span class="k">Exec</span> <span class="n">time</span>     <span class="mi">25</span>  <span class="mi">20003</span><span class="n">s</span>     <span class="mi">12</span><span class="n">s</span>    <span class="mi">166</span><span class="n">s</span>     <span class="mi">42</span><span class="n">s</span>     <span class="mi">97</span><span class="n">s</span>     <span class="mi">27</span><span class="n">s</span>     <span class="mi">32</span><span class="n">s</span>
<span class="o">#</span> <span class="k">Lock</span> <span class="n">time</span>      <span class="mi">0</span>    <span class="mi">86</span><span class="n">ms</span>    <span class="mi">58</span><span class="n">us</span>    <span class="mi">23</span><span class="n">ms</span>   <span class="mi">179</span><span class="n">us</span>   <span class="mi">144</span><span class="n">us</span>     <span class="mi">1</span><span class="n">ms</span>   <span class="mi">108</span><span class="n">us</span>
<span class="o">#</span> <span class="k">Rows</span> <span class="n">sent</span>      <span class="mi">0</span>   <span class="mi">8</span><span class="p">.</span><span class="mi">98</span><span class="n">k</span>      <span class="mi">10</span>      <span class="mi">20</span>   <span class="mi">19</span><span class="p">.</span><span class="mi">25</span>   <span class="mi">19</span><span class="p">.</span><span class="mi">46</span>    <span class="mi">2</span><span class="p">.</span><span class="mi">54</span>   <span class="mi">19</span><span class="p">.</span><span class="mi">46</span>
<span class="o">#</span> <span class="k">Rows</span> <span class="n">examine</span>  <span class="mi">24</span>  <span class="mi">15</span><span class="p">.</span><span class="mi">74</span><span class="k">G</span>  <span class="mi">24</span><span class="p">.</span><span class="mi">48</span><span class="n">M</span>  <span class="mi">52</span><span class="p">.</span><span class="mi">93</span><span class="n">M</span>  <span class="mi">33</span><span class="p">.</span><span class="mi">71</span><span class="n">M</span>  <span class="mi">51</span><span class="p">.</span><span class="mi">29</span><span class="n">M</span>  <span class="mi">10</span><span class="p">.</span><span class="mi">49</span><span class="n">M</span>  <span class="mi">27</span><span class="p">.</span><span class="mi">20</span><span class="n">M</span>
<span class="o">#</span> <span class="n">Query</span> <span class="k">size</span>     <span class="mi">3</span> <span class="mi">183</span><span class="p">.</span><span class="mi">98</span><span class="n">k</span>     <span class="mi">393</span>     <span class="mi">404</span>  <span class="mi">394</span><span class="p">.</span><span class="mi">14</span>  <span class="mi">400</span><span class="p">.</span><span class="mi">73</span>    <span class="mi">5</span><span class="p">.</span><span class="mi">50</span>  <span class="mi">381</span><span class="p">.</span><span class="mi">65</span>
<span class="o">#</span> <span class="n">String</span><span class="p">:</span>
<span class="o">#</span> <span class="n">Databases</span>    <span class="n">we8</span>
<span class="o">#</span> <span class="n">Hosts</span>
<span class="o">#</span> <span class="n">Users</span>        <span class="n">root</span>
<span class="o">#</span> <span class="n">Query_time</span> <span class="n">distribution</span>
<span class="o">#</span>   <span class="mi">1</span><span class="n">us</span>
<span class="o">#</span>  <span class="mi">10</span><span class="n">us</span>
<span class="o">#</span> <span class="mi">100</span><span class="n">us</span>
<span class="o">#</span>   <span class="mi">1</span><span class="n">mss</span>
<span class="o">#</span>  <span class="mi">10</span><span class="n">ms</span>
<span class="o">#</span> <span class="mi">100</span><span class="n">ms</span>
<span class="o">#</span>    <span class="mi">1</span><span class="n">s</span>
<span class="o">#</span>  <span class="mi">10</span><span class="n">s</span><span class="o">+</span>  <span class="o">################################################################</span>
<span class="o">#</span> <span class="n">Tables</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">TABLE</span> <span class="n">STATUS</span> <span class="k">FROM</span> <span class="nv">`we8`</span> <span class="k">LIKE</span> <span class="s1">'lv_pt_order'</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`we8`</span><span class="p">.</span><span class="nv">`lv_pt_order`</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">TABLE</span> <span class="n">STATUS</span> <span class="k">FROM</span> <span class="nv">`we8`</span> <span class="k">LIKE</span> <span class="s1">'lv_pt_order_detail'</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`we8`</span><span class="p">.</span><span class="nv">`lv_pt_order_detail`</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">TABLE</span> <span class="n">STATUS</span> <span class="k">FROM</span> <span class="nv">`we8`</span> <span class="k">LIKE</span> <span class="s1">'lv_pt_goods'</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`we8`</span><span class="p">.</span><span class="nv">`lv_pt_goods`</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">TABLE</span> <span class="n">STATUS</span> <span class="k">FROM</span> <span class="nv">`we8`</span> <span class="k">LIKE</span> <span class="s1">'lv_user'</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span>    <span class="k">SHOW</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`we8`</span><span class="p">.</span><span class="nv">`lv_user`</span><span class="err">\</span><span class="k">G</span>
<span class="o">#</span> <span class="k">EXPLAIN</span> <span class="cm">/*!50100 PARTITIONS*/</span>
<span class="k">SELECT</span> <span class="nv">`o`</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="nv">`od`</span><span class="p">.</span><span class="nv">`attr`</span><span class="p">,</span> <span class="nv">`od`</span><span class="p">.</span><span class="nv">`num`</span><span class="p">,</span> <span class="nv">`od`</span><span class="p">.</span><span class="nv">`pic`</span><span class="p">,</span> <span class="nv">`od`</span><span class="p">.</span><span class="nv">`goods_name`</span><span class="p">,</span> <span class="nv">`g`</span><span class="p">.</span><span class="nv">`name`</span> <span class="k">AS</span> <span class="nv">`goods_name`</span><span class="p">,</span> <span class="nv">`u`</span><span class="p">.</span><span class="nv">`nickname`</span> <span class="k">FROM</span> <span class="nv">`lv_pt_order`</span> <span class="nv">`o`</span> <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="nv">`lv_pt_order_detail`</span> <span class="nv">`od`</span> <span class="k">ON</span> <span class="n">od</span><span class="p">.</span><span class="n">order_id</span><span class="o">=</span><span class="n">o</span><span class="p">.</span><span class="n">id</span> <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="nv">`lv_pt_goods`</span> <span class="nv">`g`</span> <span class="k">ON</span> <span class="k">g</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="n">od</span><span class="p">.</span><span class="n">goods_id</span> <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="nv">`lv_user`</span> <span class="nv">`u`</span> <span class="k">ON</span> <span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="n">o</span><span class="p">.</span><span class="n">user_id</span> <span class="k">WHERE</span> <span class="p">((</span><span class="nv">`o`</span><span class="p">.</span><span class="nv">`is_delete`</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="nv">`o`</span><span class="p">.</span><span class="nv">`store_id`</span><span class="o">=</span><span class="mi">5</span><span class="p">))</span> <span class="k">AND</span> <span class="p">(</span><span class="nv">`o`</span><span class="p">.</span><span class="nv">`is_cancel`</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="nv">`o`</span><span class="p">.</span><span class="nv">`addtime`</span> <span class="k">DESC</span> <span class="k">LIMIT</span> <span class="mi">20</span><span class="err">\</span><span class="k">G</span>
</code></pre></div></div>
<p>可以看到这条详细分析对应着<code class="highlighter-rouge">Profile</code>中的<code class="highlighter-rouge">Rank 1</code>, 其中<code class="highlighter-rouge">pct</code>即percentage， 表示该查询在该文件中的占比， 其余的基本大同小异。
在表格下方有一个直方图， 表示该查询的时间分布情况， 再往下就是实际的慢查询语句。
可以很直观的看到这条SQL语句的平均执行时间为42s， 最大查询时间166s,  总计执行了478次， 也算是颠覆了我对慢查询时间的认知， 我以为2s的查询就已经很糟糕了， 没想到这里竟然有100+s。</p>

<h4 id="3-pt-query-digest筛选参数">3. pt-query-digest筛选参数</h4>
<p>上面儿的内容基本上就是<code class="highlighter-rouge">pt-query-digest</code>所能够产生的结果， 另外可以添加一些参数来进行筛选。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 给出最近1个小时的慢查询分析结果</span>
pt-query-digest <span class="nt">--report</span> <span class="nt">--since</span> 3600s mysql-slow.log

<span class="c"># 给出一个时间区间的慢查询分析结果</span>
pt-query-digest <span class="nt">--report</span> <span class="nt">--since</span> <span class="s1">'2018-09-20 18:23:33'</span> <span class="nt">--until</span> <span class="s1">'2018-10-13 00:03:20'</span> mysql-slow.log

<span class="c"># 给出某个用户的所有慢查询， 在设计应用时， 前台和后台可以使用不同的MySQL账户</span>
pt-query-digest <span class="nt">--filter</span> <span class="s1">'($event-&gt;{user} || "") =~ m/^root/i'</span> mysql-slow.log
</code></pre></div></div>

<p>更多的内容请见官网。</p>

<blockquote>
  <p>https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html#</p>
</blockquote>

	  ]]></description>
	</item>

	<item>
	  <title>binlog的正确打开方式</title>
	  <link>//MySQL-binlog</link>
	  <author></author>
	  <pubDate>2018-10-23T10:18:00+00:00</pubDate>
	  <guid>//MySQL-binlog</guid>
	  <description><![CDATA[
	     <p>在前面的主从复制中我们提到了bin-log， 主从复制中bing-log主要作为一种增量复制的方法进行主库与从库的同步。 在日常生产中， bin-log常常也作为实时数据恢复的必要手段。</p>

<!---more--->

<h4 id="1-配置binlog">1. 配置binlog</h4>

<p>binlog二进制日志的格式有<code class="highlighter-rouge">statement</code>, <code class="highlighter-rouge">row</code>以及<code class="highlighter-rouge">mixed</code>。 其中<code class="highlighter-rouge">statement</code>格式只会记录增删改以及对表结构变动的SQL语句， 即<code class="highlighter-rouge">update xx set xxx</code>， 不会保存数据改动前的信息， 磁盘占用空间少。 <code class="highlighter-rouge">row</code>格式将会记录完整的数据改动前后信息， 对数据的修改更加直观， 但占用磁盘空间更多。 <code class="highlighter-rouge">mixed</code>为<code class="highlighter-rouge">statement</code>模式和<code class="highlighter-rouge">row</code>模式的混合， 当出现了对表结构的修改(修改， 删除字段)， 为了避免日志中记录海量的信息， 此时MySQL会采用<code class="highlighter-rouge">statement</code>模式记录<code class="highlighter-rouge">alter table</code>， 对于对数据的增删改记录每一行的信息变动。
具体的日志格式参考博文MySQL主从复制。
通常来讲二进制日志的打开比较的简单， ubuntu 18.04下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf

server-id <span class="o">=</span> 2                           <span class="c"># 保持server-id在MySQL集群中的唯一性</span>
log_bin <span class="o">=</span> /var/log/mysql/mysql-bin.log  <span class="c"># 记录binlog的文件位置</span>
expire_logs_days <span class="o">=</span> 10                   <span class="c"># binlog日志过期时间</span>
max_binlog_size <span class="o">=</span> 100M                  <span class="c"># 单个binlog允许的最大文件值</span>
</code></pre></div></div>

<p>配置完成需要对MySQL进行重启。</p>

<h4 id="2-选择哪一种日志格式">2. 选择哪一种日志格式</h4>

<p>前面已经描述了3种日志格式， 在MySQL 5.7 版本中默认为<code class="highlighter-rouge">Row</code>格式。 <code class="highlighter-rouge">statement</code>格式在日志恢复以及主从复制中会出现较多的问题， 所以该格式不予考虑。 <code class="highlighter-rouge">Row</code>格式和<code class="highlighter-rouge">Mixed</code>格式基本能够满足我们的要求， 可以选择其中的一个。
此外， 在<code class="highlighter-rouge">Row</code>模式下还有3个可选的日志格式： <code class="highlighter-rouge">FULL</code>, <code class="highlighter-rouge">MINIMAL</code>, <code class="highlighter-rouge">NOBLOB</code>。 其中<code class="highlighter-rouge">FULL</code>格式将会记录所有的数据上下文， <code class="highlighter-rouge">MINIMAL</code>只会记录被修改的字段， <code class="highlighter-rouge">NOBLOB</code>在<code class="highlighter-rouge">text</code>字段下记录部分上下文， 其余为完整上下文。
当我们有足够的带宽以及磁盘空间， 并且能够保证主从复制之间的网络连接是稳定的情况下， 尽量使用<code class="highlighter-rouge">FULL</code>模式， 更多的信息会带来更好的恢复以及查看。 当主库的更新频率以及数量较大时， 选择<code class="highlighter-rouge">MINIMAL</code>以保证主从复制的低延迟性。</p>

<h4 id="3-常用的查看相关配置的命令">3. 常用的查看相关配置的命令</h4>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 给出完整的binlog配置信息， 但是没有日志记录的路径以及二进制日志是否开启的信息</span>
<span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="nv">"%binlog%"</span><span class="p">;</span>

<span class="c1">-- 给出binlog是否开启以及binlog所在磁盘位置信息</span>
<span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="nv">"%log_bin%"</span><span class="p">;</span>

<span class="c1">-- 给出当前binlog写入文件名以及当前binlog的偏移量</span>
<span class="k">show</span> <span class="n">master</span> <span class="n">status</span><span class="p">;</span>

<span class="c1">-- 给出所有的binlog所记录的偏移量</span>
<span class="k">show</span> <span class="n">master</span> <span class="n">logs</span><span class="p">;</span>

<span class="c1">-- 在shell中对binlog进行解析， -vv参数针对于Row格式的binlog</span>
<span class="n">sudo</span> <span class="n">mysqlbinlog</span> <span class="o">-</span><span class="n">vv</span> <span class="n">mysql</span><span class="o">-</span><span class="n">bin</span><span class="p">.</span><span class="mi">000005</span>
</code></pre></div></div>

<h4 id="4-错误的binlog数据恢复">4. 错误的binlog数据恢复</h4>

<p>binlog并没有我们想象中的那么复杂， 但是也没有那么容易。 如果在某个时间点数据遭到损坏， 然后使用：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myslbinlog <span class="nt">-vv</span> <span class="nv">start_positon</span><span class="o">=</span>153 <span class="nv">end_position</span><span class="o">=</span>724 <span class="nt">--database</span><span class="o">=</span>temp | mysql <span class="nt">-uroot</span> <span class="nt">-p</span> temp
</code></pre></div></div>

<p>这种方式进行恢复的话， 99%的情况下都会失败。 binlog恢复的原理与主从复制完全相同， 将一定时间区间内的SQL语句重新执行(statement)或者直接进行数据库修改(row)， 假如我们的binlog如下方所示：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">###</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`new_table`</span>
<span class="o">###</span> <span class="k">SET</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">6</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'haha'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'29'</span> <span class="cm">/* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">2761</span>

<span class="o">###</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`student`</span>
<span class="o">###</span> <span class="k">SET</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">3</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'Ray'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'women'</span> <span class="cm">/* VARSTRING(135) meta=135 nullable=1 is_null=0 */</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">3036</span>

<span class="o">###</span> <span class="k">UPDATE</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`new_table`</span>
<span class="o">###</span> <span class="k">WHERE</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">6</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'haha'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'29'</span> <span class="cm">/* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="o">###</span> <span class="k">SET</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">6</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'haha'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'27'</span> <span class="cm">/* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">3325</span>

<span class="o">###</span> <span class="k">DELETE</span> <span class="k">FROM</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`new_table`</span>
<span class="o">###</span> <span class="k">WHERE</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">5</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'biubiu'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'24'</span> <span class="cm">/* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">3602</span>

<span class="o">###</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`new_table`</span>
<span class="o">###</span> <span class="k">SET</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">1</span><span class="o">=</span><span class="mi">7</span> <span class="cm">/* INT meta=0 nullable=0 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">2</span><span class="o">=</span><span class="s1">'cherry'</span> <span class="cm">/* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="o">###</span>   <span class="o">@</span><span class="mi">3</span><span class="o">=</span><span class="s1">'0'</span> <span class="cm">/* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">3878</span>
</code></pre></div></div>

<p>有一些长， 但是其实内部的结构是很简单的， 基本上就是：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new_table表插入数据 -&gt; student表插入数据 -&gt; new_table更新数据 -&gt; new_table删除数据 -&gt; new_table插入数据
</code></pre></div></div>

<p>其中<code class="highlighter-rouge">new_table删除数据</code>就是一个误操作， 我们需要进行挽回。 然后我们在此基础上执行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysqlbinlog <span class="nt">-vv</span> mysql-bin.000007 <span class="nt">--start-position</span><span class="o">=</span>2761 <span class="nt">--stop-position</span><span class="o">=</span>3325 | mysql <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> repl_test
</code></pre></div></div>

<p>因为<code class="highlighter-rouge">DELETE</code>操作的偏移量为3602， 所以我们恢复上一个偏移量的数据， 也就是3325, 那么这条语句无情的抛出了异常：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR 1062 <span class="o">(</span>23000<span class="o">)</span> at line 64: Duplicate entry <span class="s1">'3'</span> <span class="k">for </span>key <span class="s1">'PRIMARY'</span>
</code></pre></div></div>

<p>因为在此时此刻， <code class="highlighter-rouge">new_table</code>中id为3的数据是存在的， 并没有被删除， 那么我再重新执行这条<code class="highlighter-rouge">insert</code>语句， 报错是必然的。 那么这个时候怎么恢复？
非常遗憾， 这个时候这样的条件， 只能手动的一条数据一条数据的重新插入， 没有其它的办法。 那么到底该如何的使用binlog来进行自动的恢复呢？</p>

<h4 id="5-正确的binlog数据恢复">5. 正确的binlog数据恢复</h4>

<p>binlog其实是一种增量恢复的模式， 那么既然是增量， 就必然需要有基量以及增量。 基量从哪儿来？ 来自数据库的完整备份， 即<code class="highlighter-rouge">mysqldump</code>。 增量从哪儿来？ 来自于上次完整备份时的binlog到现在的binlog。
可以看下面的示意图：</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Blog/2018-10-13%2011-18-32%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="Alt text" /></p>

<p>当我们为机器安装MySQL并且开启了binlog之后， 就有了mysql-bin文件的产生， 如果我们不去维护binlog的话， 那么当到达了最大容量限制或者MySQL重启时会进行自动切割。 当某一天数据出现了问题，需要使用binlog进行恢复时发现， mysql-bin因为过期时间的配置前面的binlog已经不见了， 并且数据库的备份是11天以前的， 完全无法进行恢复， 欢声笑语打出GG。
通常的做法是在执行数据库备份计划的同时， <code class="highlighter-rouge">flush logs</code>将日志进行主动的切割， 并在本地保留所有binlog日志。 假设我们的备份是每天的凌晨3点进行整体的数据库备份， 然后切割binlog。 在当天的下午2点数据需要进行恢复， 流程如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 停止MySQL服务， 并删除对应的database。
2. 导入备份数据<span class="o">(</span>这时候是凌晨3点时的数据<span class="o">)</span>。
3. 找到分割的binlog， 并找到误删数据的语句， 确定偏移量。
4. 绕开误删除语句的偏移量， 进行数据恢复。
</code></pre></div></div>

<p>这里面就有了一些很重要的步骤： 必须要知道当前的备份所对应的binlog偏移量， 必须要知道误删除语句的binlog偏移量。 只有知道了这些信息才能够进行无损的数据恢复。</p>

<h4 id="6-实践binlog数据恢复">6. 实践binlog数据恢复</h4>

<p>首先我们需要一个更加复杂的数据库结构以应对生产环境的复杂情况， 这里的话就使用<code class="highlighter-rouge">Django</code>框架来自动的生成表结构以及填充数据。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 测试binlog数据恢复的本地数据模型</span>

<span class="k">class</span> <span class="nc">BaseModel</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">created</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">updated</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>


<span class="k">class</span> <span class="nc">Chatroom</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">nickname</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">owner</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">head_img</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">URLField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ChatroomMember</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">nickname</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">head_img</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">URLField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
    <span class="n">city</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">()</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ChatroomRelation</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">chatroom</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Chatroom</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">SET_NULL</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">member</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">ChatroomMember</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">SET_NULL</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">joined</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">chatroom_nickname</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">unique_together</span> <span class="o">=</span> <span class="p">(</span><span class="s">"chatroom"</span><span class="p">,</span> <span class="s">"member"</span><span class="p">)</span>
</code></pre></div></div>

<p>在填充数据之后进行<code class="highlighter-rouge">mysqldump</code>进行备份， 需要注意的是一定要记录当前dump的binlog偏移量， 即添加<code class="highlighter-rouge">--master-data</code>参数， 并且在备份时仍有数据进行插入</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqldump <span class="nt">--master-data</span> <span class="nt">--single-transaction</span> <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> myProjects <span class="o">&gt;</span> /home/smartkeyerror/mysql_dumps/test.sql
</code></pre></div></div>

<p>打开<code class="highlighter-rouge">test.sql</code>， 可以看到当前备份的偏移量：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CHANGE MASTER TO <span class="nv">MASTER_LOG_FILE</span><span class="o">=</span><span class="s1">'mysql-bin.000007'</span>, <span class="nv">MASTER_LOG_POS</span><span class="o">=</span>99082<span class="p">;</span>

<span class="c"># client-session查看</span>
mysql&gt; show master logs<span class="p">;</span>
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |      3370 |
| mysql-bin.000002 |     19108 |
| mysql-bin.000003 |       177 |
| mysql-bin.000004 |       201 |
| mysql-bin.000005 |    115978 |
| mysql-bin.000006 |       201 |
| mysql-bin.000007 |    125900 |
| mysql-bin.000008 |       154 |
+------------------+-----------+
8 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></div></div>

<p>因为在测试的过程中突然断电了(刚好遇到了一个特殊情况)， 所以binlog日志又被切割出去了， 一个很奇怪的现象， 起始位置不是0， 而是154， 我们再切割一个：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; flush logs<span class="p">;</span>
Query OK, 0 rows affected <span class="o">(</span>0.07 sec<span class="o">)</span>

mysql&gt; show master logs<span class="p">;</span>
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |      3370 |
| mysql-bin.000002 |     19108 |
| mysql-bin.000003 |       177 |
| mysql-bin.000004 |       201 |
| mysql-bin.000005 |    115978 |
| mysql-bin.000006 |       201 |
| mysql-bin.000007 |    125900 |
| mysql-bin.000008 |       201 |
| mysql-bin.000009 |       154 |
+------------------+-----------+
9 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">mysql-bin.000008</code>多了47个偏移， 新切割的binlog起始偏移仍然是154。
回到数据恢复， 在备份时我们知道了日志的偏移量为99082， 并且当时的binlog为<code class="highlighter-rouge">mysql-bin.000007</code>， 首先我们先删除一部分数据， 然后再写入一些数据。
时序图：</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Blog/2018-10-13%2016-13-53%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="" /></p>

<p>那么我们只需要做两件事：找到删除数据的binlog文件位置以及偏移量， 删库(这回不用跑路)后恢复数据。
那就找呗， 在0007 99082至009 38924之间查找<code class="highlighter-rouge">DELETE FROM</code>, 通过使用<code class="highlighter-rouge">grep</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># -C参数会在匹配的关键字前后各打印30行的数据</span>
<span class="nb">sudo </span>mysqlbinlog mysql-bin.000007 <span class="nt">-vv</span> | <span class="nb">grep</span> <span class="nt">-C</span> 30 <span class="s2">"DELETE FROM"</span>
<span class="nb">sudo </span>mysqlbinlog mysql-bin.000008 <span class="nt">-vv</span> | <span class="nb">grep</span> <span class="nt">-C</span> 30 <span class="s2">"DELETE FROM"</span>
</code></pre></div></div>

<p>最终在009 451至009 943发现了<code class="highlighter-rouge">DELETE FROM</code>语句， 那么我们就可以开始恢复数据了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. DROP DATABASE myProjects

2. 导入数据， 抛了异常
ERROR 3021 <span class="o">(</span>HY000<span class="o">)</span> at line 22: This operation cannot be performed with a running slave io thread<span class="p">;</span> run STOP SLAVE IO_THREAD FOR CHANNEL <span class="s1">''</span> first.

3. 运行 STOP SLAVE IO_THREAD FOR CHANNEL <span class="s2">""</span><span class="p">;</span>

4. 重新导入数据

5. 恢复0007 99082到尾部的数据
<span class="nb">sudo </span>mysqlbinlog <span class="nt">--start-position</span><span class="o">=</span>99082 <span class="nt">-vv</span> mysql-bin.000007 | mysql <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> myProjects

6. 恢复008以及009 451之前的数据
这里有一个如何选择结束点的问题， 首先来看一下grep信息， 选择370报错， 选择287正常， 也不知道为什么

BEGIN
/<span class="k">*</span><span class="o">!</span><span class="k">*</span>/<span class="p">;</span>
<span class="c"># at 287</span>
<span class="c">#181013 15:41:44 server id 2  end_log_pos 370 CRC32 0x4d8bbd3e 	Table_map: `myProjects`.`devOps_chatroomrelation` mapped to number 109</span>
<span class="c"># at 370</span>
<span class="c">#181013 15:41:44 server id 2  end_log_pos 451 CRC32 0xf7657cfe 	Delete_rows: table id 109 flags: STMT_END_F</span>

BINLOG <span class="s1">'
uKHBWxMCAAAAUwAAAHIBAAAAAG0AAAAAAAEACm15UHJvamVjdHMAF2Rldk9wc19jaGF0cm9vbXJl
bGF0aW9uAAcDEhISDwMDBQYGBsgAYD69i00=
uKHBWyACAAAAUQAAAMMBAAAAAG0AAAAAAAEAAgAH/4BqAAAAmaEa7SEEkKWZoRrtIQSQ5pmhGu0h
BJFGCGFva0pWcEdPJQAAABMAAAD+fGX3
'</span>/<span class="k">*</span><span class="o">!</span><span class="k">*</span>/<span class="p">;</span>
<span class="c">### DELETE FROM `myProjects`.`devOps_chatroomrelation`</span>
.... <span class="c"># 中间被我干掉了</span>
<span class="c"># at 451</span>
<span class="c">#181013 15:41:44 server id 2  end_log_pos 534 CRC32 0xade8611d 	Table_map: `myProjects`.`devOps_chatroomrelation` mapped to number 109</span>
<span class="c"># at 534</span>
<span class="c">#181013 15:41:44 server id 2  end_log_pos 615 CRC32 0x55e89f5b 	Delete_rows: table id 109 flags: STMT_END_F</span>

<span class="nb">sudo </span>mysqlbinlog <span class="nt">-vv</span> mysql-bin.000008 | mysql <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> myProjects

<span class="nb">sudo </span>mysqlbinlog <span class="nt">-vv</span> mysql-bin.000009 <span class="nt">--stop-position</span><span class="o">=</span>287 | mysql <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> myProjects

<span class="nb">sudo </span>mysqlbinlog <span class="nt">-vv</span> mysql-bin.000009 <span class="nt">--start-position</span><span class="o">=</span>1119 | mysql <span class="nt">-uroot</span> <span class="nt">-pkeyerror</span> myProjects

7. 确认数据正常恢复， 并开启对外服务。
</code></pre></div></div>

<h4 id="7-总结">7. 总结</h4>

<p>上面就是使用binlog进行数据恢复的整个过程， 没有什么特别复杂的地方， 只不过步骤比较繁琐， 偏移量必须准确才能够成功。 对一些比较重要的操作进行整理：</p>
<ol>
  <li>备份时必须添加<code class="highlighter-rouge">--master-data</code>参数； <code class="highlighter-rouge">-F</code>切割二进制日志可选， 添加之后会更加的方便</li>
  <li>必须找到误删数据的偏移量， 备份时绕过这些数据修改。</li>
  <li>因流程较为复杂， 确认无误后进行操作。</li>
</ol>

<p>另外使用<code class="highlighter-rouge">mysqlbinlog</code>对binlog进行解析的话查看起来并不是很方便， 可以在<code class="highlighter-rouge">client</code>中使用</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">show</span> <span class="n">binlog</span> <span class="n">events</span> <span class="p">[</span><span class="k">in</span> <span class="s1">'binlog-name'</span><span class="p">]</span> <span class="p">[</span><span class="k">from</span> <span class="k">position</span><span class="p">]</span> <span class="err">\</span><span class="k">G</span><span class="p">;</span>
</code></pre></div></div>

<p>来更加直观的查看相关内容以及偏移量， 不过这种方式查看的话没有具体数据信息， 可以结合<code class="highlighter-rouge">mysqlbinlog</code>命令共同使用。</p>

	  ]]></description>
	</item>

	<item>
	  <title>MySQL之主从复制</title>
	  <link>//MySQL-master-slave</link>
	  <author></author>
	  <pubDate>2018-10-23T09:49:09+00:00</pubDate>
	  <guid>//MySQL-master-slave</guid>
	  <description><![CDATA[
	     <p>MySQL的主从复制是建立读写分离以及MySQL集群的根本， 为了能够保证复制的正常运行， 那么就必然需要对其原理以及核心的配置项有足够的了解， 才能够在复杂的生产环境中对错误进行排查。</p>

<!---more--->

<h4 id="1-mysql主从复制原理">1. MySQL主从复制原理</h4>

<p>MySQL之间数据复制的基础是<code class="highlighter-rouge">二进制日志</code>文件(binary log file)。 一台MySQL数据库一旦启用二进制日志后， 其作为master， 它的数据库中所有操作都会以“事件”的方式记录在二进制日志中， 其他数据库作为slave通过一个<code class="highlighter-rouge">I/O线程</code>与主服务器保持通信， 并监控master的二进制日志文件的变化， 如果发现master二进制日志文件发生变化， 则会把变化复制到自己的<code class="highlighter-rouge">中继日志中</code>， 然后slave的一个<code class="highlighter-rouge">SQL线程</code>会把相关的“事件”执行到自己的数据库中， 以此实现从数据库和主数据库的一致性，也就实现了主从复制。</p>

<p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Blog/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="Alt text" /></p>

<h4 id="1-实现mysql主从复制需要进行的配置">1. 实现MySQL主从复制需要进行的配置</h4>
<ol>
  <li>主服务器：
    <ul>
      <li>开启二进制日志</li>
      <li>配置唯一的server-id</li>
      <li>获得master二进制日志文件名及位置</li>
      <li>创建一个用于slave和master通信的用户账号</li>
    </ul>
  </li>
  <li>从服务器：
    <ul>
      <li>配置唯一的server-id</li>
      <li>使用master分配的用户账号读取master二进制日志</li>
      <li>启用slave服务</li>
    </ul>
  </li>
</ol>

<h4 id="2-binlog相关配置以及参数说明">2. binlog相关配置以及参数说明</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; show variables like <span class="s2">"%binlog%"</span><span class="p">;</span>
+--------------------------------------------+----------------------+
| Variable_name                              | Value                |
+--------------------------------------------+----------------------+
| binlog_cache_size                          | 32768                |
| binlog_checksum                            | CRC32                |
| binlog_direct_non_transactional_updates    | OFF                  |
| binlog_error_action                        | ABORT_SERVER         |
| binlog_format                              | ROW                  |
| binlog_group_commit_sync_delay             | 0                    |
| binlog_group_commit_sync_no_delay_count    | 0                    |
| binlog_gtid_simple_recovery                | ON                   |
| binlog_max_flush_queue_time                | 0                    |
| binlog_order_commits                       | ON                   |
| binlog_row_image                           | FULL                 |
| binlog_rows_query_log_events               | OFF                  |
| binlog_stmt_cache_size                     | 32768                |
| binlog_transaction_dependency_history_size | 25000                |
| binlog_transaction_dependency_tracking     | COMMIT_ORDER         |
| innodb_api_enable_binlog                   | OFF                  |
| innodb_locks_unsafe_for_binlog             | OFF                  |
| log_statements_unsafe_for_binlog           | ON                   |
| max_binlog_cache_size                      | 18446744073709547520 |
| max_binlog_size                            | 104857600            |
| max_binlog_stmt_cache_size                 | 18446744073709547520 |
| sync_binlog                                | 1                    |
+--------------------------------------------+----------------------+
22 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></div></div>
<p>通过在mysql客户端执行<code class="highlighter-rouge">show variables</code>命令， 可以看到关于<code class="highlighter-rouge">binlog</code>的配置一共有20几项之多。 但是大部分的配置项我们可以直接使用默认值， 有几个配置需要额外的进行关注：</p>

<h5 id="21-binlog_format">2.1 binlog_format</h5>
<p>二进制日志格式有3种格式可选： Statement, Row以及Mixed。 其中Statement格式基于语句进行日志记录， Row格式基于数据修改进行记录。
首先准备一下测试的数据库：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">database</span> <span class="n">repl_test</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`repl_test`</span><span class="p">.</span><span class="nv">`new_table`</span> <span class="p">(</span>
  <span class="nv">`id`</span> <span class="n">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="nv">`name`</span> <span class="n">VARCHAR</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="nv">`age`</span> <span class="n">VARCHAR</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span> <span class="n">CHARACTER</span> <span class="k">SET</span> <span class="s1">'utf8mb4'</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`id`</span><span class="p">));</span>
</code></pre></div></div>
<h6 id="211-statement">2.1.1 Statement</h6>

<p>简单的来说Statement格式就是记录了数据修改所执行的SQL语句， 那么在做主从复制时从库读取SQL语句并重新进行执行。
我们创建一个database以及一个table， 并在table中插入一些数据来观察一下：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">set</span> <span class="k">session</span> <span class="n">binlog_format</span><span class="o">=</span><span class="k">statement</span><span class="p">;</span>

<span class="k">insert</span> <span class="k">into</span> <span class="n">new_table</span> <span class="k">values</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">"smart"</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">"keyerror"</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
<span class="k">delete</span> <span class="k">from</span> <span class="n">new_table</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>
<p>在二进制日志保存的文件夹中查看二进制日志：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysqlbinlog mysql-bin.000001  <span class="c"># Statement格式日志</span>
<span class="nb">sudo </span>mysqlbinlog <span class="nt">-vv</span> mysql-bin.000001  <span class="c"># Row格式日志</span>
</code></pre></div></div>
<p>那么Statement格式的日志就会是这个样子：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into new_table values <span class="o">(</span>1, <span class="s2">"smart"</span>, 18<span class="o">)</span>, <span class="o">(</span>2, <span class="s2">"keyerror"</span>, 25<span class="o">)</span>
....  <span class="c"># 中间一些其它内容</span>
BEGIN
/<span class="k">*</span><span class="o">!</span><span class="k">*</span>/<span class="p">;</span>
<span class="c"># at 2297</span>
<span class="c">#181011 10:16:38 server id 1  end_log_pos 2413 CRC32 0xccb8b51b         Query   thread_id=2     exec_time=0     error_code=0</span>
SET <span class="nv">TIMESTAMP</span><span class="o">=</span>1539224198/<span class="k">*</span><span class="o">!</span><span class="k">*</span>/<span class="p">;</span>
delete from new_table where <span class="nv">id</span><span class="o">=</span>2
/<span class="k">*</span><span class="o">!</span><span class="k">*</span>/<span class="p">;</span>
<span class="c"># at 2413</span>
...
</code></pre></div></div>
<p>可以看到在日志中完整了记录了每一条SQL语句的内容， 从库拿到这些语句重新执行就可以获得与主库相同的数据了。
因为记录的是SQL语句， 那么会极大的降低二进制日志文件的大小， 并且在复制的有着更快的网络传输效率。
缺点也显而易见：像Uuid()这样的函数每次执行返回不同的结果， 那么这样一来在主库和从库中数据就会有不一致的情况。 并且如果某一条SQL语句执行时间过长， 从库同样的也要执行很长时间， 这样一来复制的过程就可能会被阻塞， 主从之间的数据一致性在这段时间就会遭到破坏。 所以一般在生产环境中并不会使用这样的日志格式， 除非有特殊的需求需要进行临时的修改。</p>

<h6 id="212-row">2.1.2 Row</h6>

<p>Row格式在MySQL5.7版本中为默认的二进制日志格式， 日志中会记录每一行数据的修改， 然后在从库中应用这些修改。</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">set</span> <span class="k">session</span> <span class="n">binlog_format</span><span class="o">=</span><span class="k">row</span><span class="p">;</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">new_table</span> <span class="k">values</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nv">"zhangsan"</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>
<span class="k">update</span> <span class="n">new_table</span> <span class="k">set</span> <span class="n">age</span><span class="o">=</span><span class="mi">19</span> <span class="k">where</span> <span class="n">age</span><span class="o">=</span><span class="mi">18</span><span class="p">;</span>
</code></pre></div></div>
<p>那么此时日志所记录的内容为：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">### INSERT INTO `repl_test`.`new_table`</span>
<span class="c">### SET</span>
<span class="c">###   @1=3 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">###   @2='zhangsan' /* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="c">###   @3='18' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>

<span class="c">### UPDATE `repl_test`.`new_table`</span>
<span class="c">### WHERE</span>
<span class="c">###   @1=1 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">###   @2='smart' /* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="c">###   @3='18' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="c">### SET</span>
<span class="c">###   @1=1 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">###   @2='smart' /* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="c">###   @3='19' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="c">### UPDATE `repl_test`.`new_table`</span>
<span class="c">### WHERE</span>
<span class="c">###   @1=3 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">###   @2='zhangsan' /* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="c">###   @3='18' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
<span class="c">### SET</span>
<span class="c">###   @1=3 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">###   @2='zhangsan' /* VARSTRING(45) meta=45 nullable=1 is_null=0 */</span>
<span class="c">###   @3='19' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
</code></pre></div></div>
<p>可以看到每一行的修改都被记录了， 并且记录了修改行的前后的数据内容， 那么这样一来主库与从库就能够达到完全的数据一致性。
缺点也同样的显而易见， 数据记录的太多太啰嗦， 会占用大量的磁盘空间以及更长时间的网络传输。 但是， 是有办法优化的， 要不然MySQL官方也不会推荐我们使用Row格式。</p>

<h6 id="211-mixed">2.1.1 Mixed</h6>

<p>实际上就是上面两种模式的混合。</p>

<h5 id="21-binlog_row_image">2.1 binlog_row_image</h5>
<p>前面提到了<code class="highlighter-rouge">binlog_format=ROW</code>会带来很大的磁盘以及网络传输开销， 那么<code class="highlighter-rouge">binlog_row_image</code>参数就是为了优化<code class="highlighter-rouge">ROW</code>模式而存在的。
可选值有3个： FULL， MINIMAL, NOBLOB。其中FULL选项将会记录所有内容； MINIMAL仅会记录被修改了列， 无关列不会记录； NOBLOB记录了blog和text之外的所有字段。FULL模式所生成的日志格式就是上面我们看到的。
MINIMAL选项所生成的日志格式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">set</span> <span class="k">session</span> <span class="n">binlog_row_image</span><span class="o">=</span><span class="n">MINIMAL</span><span class="p">;</span>
<span class="k">update</span> <span class="n">new_table</span> <span class="k">set</span> <span class="n">age</span><span class="o">=</span><span class="mi">25</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">### UPDATE `repl_test`.`new_table`</span>
<span class="c">### WHERE</span>
<span class="c">###   @1=1 /* INT meta=0 nullable=0 is_null=0 */</span>
<span class="c">### SET</span>
<span class="c">###   @3='25' /* VARSTRING(180) meta=180 nullable=1 is_null=0 */</span>
</code></pre></div></div>
<p>其中<code class="highlighter-rouge">@1, @3</code>表示第几列， 也就是字段名称。这里的日志表示”将id(@1)为1的数据的年龄(@3)修改为25”， 其余未改动的字段(列)并没有记录在二进制日志中， 减少了日志的记录。</p>

<p>需要特别注意的是： 虽然MINIMAL能够减少日志的数量， 但是由于记录会选择的缺失， 那么通过这种格式的二进制日志对数据库进行恢复的难度就会提高， 排错也会有一些困难。 需要根据实际情况来正确的选择是使用<code class="highlighter-rouge">FULL</code>模式还是<code class="highlighter-rouge">MINIMAL</code>模式。</p>

<h4 id="3-基于日志点的复制和基于gtid的复制">3. 基于日志点的复制和基于GTID的复制</h4>
<h5 id="31-基于日志点的复制">3.1 基于日志点的复制</h5>
<p>基于日志点的复制MySQL会记录当前日志的数据偏移量并且将该值传递给从库， 从库根据该偏移量进行复制。
通常来讲我们启用主从复制是在已经有了主库的情况下而添加从库的， 那么此时就需要将数据导入到从库中：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 只允许读操作不允许写入</span>
flush tables with <span class="nb">read </span>lock<span class="p">;</span>
<span class="c"># 记录日志的偏移量</span>
mysqldump <span class="nt">--master-data</span> <span class="o">[</span>databses | <span class="nt">--all-databases</span><span class="o">]</span> <span class="o">&gt;</span> all.sql
or
xtrbackup <span class="nt">--slave-info</span>  <span class="c"># 第三方工具， 仅用于InnoDB， 属于热备工具</span>
</code></pre></div></div>
<p>那么此时从库就可以开启复制链路了， 其中的<code class="highlighter-rouge">master_log_file</code>以及<code class="highlighter-rouge">master_log_pos</code>可以在刚才的数据库备份中找到：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">将数据进行导入</span>
<span class="n">change</span> <span class="n">master</span> <span class="k">to</span> <span class="n">master_host</span><span class="o">=</span><span class="nv">"192.168.0.5"</span><span class="p">,</span>
                 <span class="n">master_user</span><span class="o">=</span><span class="nv">""</span><span class="p">,</span>
                 <span class="n">master_password</span><span class="o">=</span><span class="nv">""</span><span class="p">,</span>
                 <span class="n">master_log_file</span><span class="o">=</span><span class="nv">"二进制日志文件名"</span><span class="p">,</span>
                 <span class="n">master_log_pos</span><span class="o">=</span><span class="err">偏移量</span>
<span class="k">start</span> <span class="n">slave</span><span class="p">;</span>

<span class="err">主库执行：</span> <span class="n">unlock</span> <span class="n">tables</span><span class="err">；</span>
</code></pre></div></div>

<p>优点： 基于日志点的复制是MySQL最早支持的复制技术， 相对而言BUG比较少， 并且对SQL没有任何的限制， 故障处理较为容易。
缺点： 故障转移时重新获取新主的日志点信息比较困难。</p>

<h5 id="32-基于gtid的复制">3.2 基于GTID的复制</h5>
<p>基于GTID的复制原理上其实是执行每一个事务， 主库中每一个事务都有一个唯一的自增标志。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GTID <span class="o">=</span> server_uuid:transaction_id
</code></pre></div></div>
<p>借助GTID， 在发生主备切换的情况下， MySQL的其它Slave可以自动在新主上找到正确的复制位置， 不再需要像基于日志点复制一样人工的添加日志记录的偏移量， 简化了复杂复制拓扑下集群的维护。 另外，基于GTID的复制可以忽略已经执行过的事务，减少了数据发生不一致的风险。
但是这种模式同样具有缺点： 其故障处理较为复杂， 并且对执行的SQL有一定的限制。</p>


	  ]]></description>
	</item>


</channel>
</rss>
